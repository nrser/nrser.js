[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/Deferred.js",
    "content": "import Promise from 'bluebird';\n\n/**\n* bluebird dropped `defer()`, see\n* \n* http://bluebirdjs.com/docs/api/deferred-migration.html\n* \n* i think it's still really useful as a structure for when you need to store\n* handles to reject and resolve to be called later.\n*/\nexport class Deferred<T> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (error: Error) => void;\n  \n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n",
    "static": true,
    "longname": "src/Deferred.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "Deferred",
    "memberof": "src/Deferred.js",
    "static": true,
    "longname": "src/Deferred.js~Deferred",
    "access": null,
    "export": true,
    "importPath": "nrser/src/Deferred.js",
    "importStyle": "{Deferred}",
    "description": "bluebird dropped `defer()`, see\n\nhttp://bluebirdjs.com/docs/api/deferred-migration.html\n\ni think it's still really useful as a structure for when you need to store\nhandles to reject and resolve to be called later.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "member",
    "name": "promise",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#promise",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "resolve",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#resolve",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "reject",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#reject",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Deferred.js~Deferred",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Deferred.js~Deferred#constructor",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": []
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "promise",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#promise",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "resolve",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#resolve",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "reject",
    "memberof": "src/Deferred.js~Deferred",
    "static": false,
    "longname": "src/Deferred.js~Deferred#reject",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "file",
    "name": "src/array.js",
    "content": "// @flow\n\nimport _ from '//src/lodash';\n\n/**\n* If `subject` is an {@link Array}, return it. Otherwise return a new Array\n* containing only it.\n* \n* @todo\n*   Only deals with {@link Array} *exactly*. Might want to think about \n*   {@link Set} and others?\n* \n* @param {Element|Array<Element>} subject\n*   Value that may be a single element or an array of elements.\n* \n* @return {Array<Element>}\n*   `subject` or an new array of only `subject`.\n*   \n*/\nexport function asArray<Element>(\n  subject: Element | Array<Element>\n): Array<Element> {\n  if (_.isArray(subject)) {\n    return subject;\n  }\n  return [subject];\n}\n\n/**\n* Treat `subject` as an Array whether it is or not - if `subject` is an \n* {@link Array} invoke `iteratee` on each element. Otherwise just invoke \n* `iteratee` on `subject` itself.\n* \n* Like `_.each(asArray(x), f)` but avoids the allocation of a new array when\n* `x` is not one.\n* \n* Except... `iteratee` should be only relied on to be invoked with \n* `(element, index)`, since creating the array that would go in the third\n* position pretty much defeats the purpose. If you need that reference just\n* use `_.each(asArray(x), f)`.\n* \n* @example\n*   \n*   // non-array value\n*   eachAsArray('uno', v => console.log(v));\n*   // => uno\n*   \n*   // array value\n*   eachAsArray(['yi', 'er', 'san'], v => console.log(v));\n*   // => yi\n*   //    er\n*   //    san\n* \n* @param {Element|Array<Element>} subject\n*   Array to iterate over or non-array to invoke on.\n* \n* @param {function(element: Element): Result} iteratee\n*   Function to invoke on each element.\n* \n* @return {undefined}\n*/\nexport function eachAsArray<Element, Result>(\n  subject: undefined | Element | Array<Element>,\n  iteratee: (element: Element) => Result,\n): void {\n  if (_.isArray(subject)) {\n    _.each(subject, iteratee);\n  } else if (subject === undefined) {\n    // pass\n  } else {\n    iteratee(subject, 0);\n  }\n} // eachAsArray()\n\n\n/**\n* Treat `subject` as an Array to be mapped over, whether it is or not.\n* If `subject` is an {@link Array}, map `iteratee` over the elements.\n* Otherwise just invoke `iteratee` on `subject` itself and return an array\n* with only it in it.\n* \n* Like `_.map(asArray(x), f)` but avoids the allocation of a new array when\n* `x` is not one.\n* \n* Except... `iteratee` should be only relied on to be invoked with \n* `(element, index)`, since creating the array that would go in the third\n* position pretty much defeats the purpose. If you need that reference just\n* use `_.map(asArray(x), f)`.\n* \n* @example\n*   \n*   // non-array value\n*   mapAsArray('uno', e => e + '!'';\n*   // => ['uno!']\n*   \n*   // array value\n*   eachAsArray(['yi', 'er', 'san'], e => e + '!'';\n*   // => ['yi!', 'er!', 'san!']\n* \n* @param {Element|Array<Element>} subject\n*   Array to iterate over or non-array to invoke on.\n* \n* @param {function(element: Element): Result} iteratee\n*   Function to invoke on each element.\n* \n* @return {Array<Result>}\n*   Results of applying `iteratee` over subject.\n*/\nexport function mapAsArray<Element, Result>(\n  subject: Element | Array<Element>,\n  iteratee: (element: Element) => Result,\n): Array<Result> {\n  if (_.isArray(subject)) {\n    return _.map(subject, iteratee);\n  } else {\n    return [iteratee(subject, 0)];\n  }\n} // mapAsArray()\n\n_.mixin({\n  asArray,\n  mapAsArray,\n  eachAsArray,\n});\n",
    "static": true,
    "longname": "src/array.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "asArray",
    "memberof": "src/array.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array.js~asArray",
    "access": null,
    "export": true,
    "importPath": "nrser/src/array.js",
    "importStyle": "{asArray}",
    "description": "If `subject` is an {@link Array}, return it. Otherwise return a new Array\ncontaining only it.",
    "lineNumber": 20,
    "todo": [
      "  Only deals with {@link Array} *exactly*. Might want to think about \n  {@link Set} and others?"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Value that may be a single element or an array of elements."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Element>"
      ],
      "spread": false,
      "description": "`subject` or an new array of only `subject`."
    }
  },
  {
    "__docId__": 11,
    "kind": "function",
    "name": "eachAsArray",
    "memberof": "src/array.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array.js~eachAsArray",
    "access": null,
    "export": true,
    "importPath": "nrser/src/array.js",
    "importStyle": "{eachAsArray}",
    "description": "Treat `subject` as an Array whether it is or not - if `subject` is an \n{@link Array} invoke `iteratee` on each element. Otherwise just invoke \n`iteratee` on `subject` itself.\n\nLike `_.each(asArray(x), f)` but avoids the allocation of a new array when\n`x` is not one.\n\nExcept... `iteratee` should be only relied on to be invoked with \n`(element, index)`, since creating the array that would go in the third\nposition pretty much defeats the purpose. If you need that reference just\nuse `_.each(asArray(x), f)`.",
    "examples": [
      "  \n  // non-array value\n  eachAsArray('uno', v => console.log(v));\n  // => uno\n  \n  // array value\n  eachAsArray(['yi', 'er', 'san'], v => console.log(v));\n  // => yi\n  //    er\n  //    san"
    ],
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Array to iterate over or non-array to invoke on."
      },
      {
        "nullable": null,
        "types": [
          "function(element: Element): Result"
        ],
        "spread": false,
        "optional": false,
        "name": "iteratee",
        "description": "Function to invoke on each element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 12,
    "kind": "function",
    "name": "mapAsArray",
    "memberof": "src/array.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/array.js~mapAsArray",
    "access": null,
    "export": true,
    "importPath": "nrser/src/array.js",
    "importStyle": "{mapAsArray}",
    "description": "Treat `subject` as an Array to be mapped over, whether it is or not.\nIf `subject` is an {@link Array}, map `iteratee` over the elements.\nOtherwise just invoke `iteratee` on `subject` itself and return an array\nwith only it in it.\n\nLike `_.map(asArray(x), f)` but avoids the allocation of a new array when\n`x` is not one.\n\nExcept... `iteratee` should be only relied on to be invoked with \n`(element, index)`, since creating the array that would go in the third\nposition pretty much defeats the purpose. If you need that reference just\nuse `_.map(asArray(x), f)`.",
    "examples": [
      "  \n  // non-array value\n  mapAsArray('uno', e => e + '!'';\n  // => ['uno!']\n  \n  // array value\n  eachAsArray(['yi', 'er', 'san'], e => e + '!'';\n  // => ['yi!', 'er!', 'san!']"
    ],
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "Array<Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "subject",
        "description": "Array to iterate over or non-array to invoke on."
      },
      {
        "nullable": null,
        "types": [
          "function(element: Element): Result"
        ],
        "spread": false,
        "optional": false,
        "name": "iteratee",
        "description": "Function to invoke on each element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Result>"
      ],
      "spread": false,
      "description": "Results of applying `iteratee` over subject."
    }
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "src/collection.js",
    "content": "// @flow\n\n// deps\nimport _ from '//src/lodash';\n\n// package\nimport * as errors from './errors';\n\n// types\nimport type { Collection }  from './types/collection';\n\n/**\n* extra stuff that would be along the lines of lodash collections functions\n*/\n\n/**\n* find the only match, throwing if anything except one result.\n*/\nexport function findOnly<V>(\n  collection: Collection<V>,\n  predicate: (value: V) => boolean,\n): V {\n  const results: Array<V> = _.filter(collection, predicate);\n  \n  if (results.length == 0) {\n    throw new errors.NotFoundError(`no results`);\n  } else if (results.length > 1) {\n    throw new errors.NrserError(`multiple results`, results);\n  }\n  \n  return results[0];\n}\n\n/**\n* map values but drop keys where the mapped value is undefined.\n*/\nexport function mapDefined<DOMAIN, CODOMAIN>(\n  collection: Collection<DOMAIN>,\n  iteratee: (value: DOMAIN) => CODOMAIN\n): Array<CODOMAIN> {\n  const results: Array<CODOMAIN> = [];\n  \n  _.each(collection, (value: DOMAIN): void => {\n    const result = iteratee(value);\n    \n    if (result !== undefined) {\n      results.push(result);\n    }\n  });\n  \n  return results;\n}\n",
    "static": true,
    "longname": "src/collection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "findOnly",
    "memberof": "src/collection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/collection.js~findOnly",
    "access": null,
    "export": true,
    "importPath": "nrser/src/collection.js",
    "importStyle": "{findOnly}",
    "description": "find the only match, throwing if anything except one result.",
    "lineNumber": 19,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "predicate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "function",
    "name": "mapDefined",
    "memberof": "src/collection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/collection.js~mapDefined",
    "access": null,
    "export": true,
    "importPath": "nrser/src/collection.js",
    "importStyle": "{mapDefined}",
    "description": "map values but drop keys where the mapped value is undefined.",
    "lineNumber": 37,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "iteratee",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "name": "src/env.js",
    "content": "/**\n* dealing with environment.\n*/\n\nimport * as errors from './errors';\n\n/**\n* the default environment returned by {@link .env} when none is set.\n* \n* @type {string}\n*/\nexport const DEFAULT_ENV = 'development';\n\n/**\n* determine if we're in the browser by seeing if the top-level object is\n* `window`.\n* \n* @return {boolean}\n*   true if we're in a browser environment.\n*/\nexport const isBrowser = new Function(\n  \"try { return this===window; } catch(e) { return false; }\"\n);\n\n/**\n* determine if we're in node by seeing if the top-level object is `global`.\n* \n* @return {boolean}\n*   true if we're in a node environment.\n*/\nexport const isNode = new Function(\n  \"try { return this===global; } catch(e) { return false; }\"\n);\n\n/**\n* constant that is the result of calling {@link isBrowser} on import.\n* \n* @type {boolean}\n*/\nexport const IS_BROWSER = isBrowser();\n\n/**\n* constant that is the result of calling {@link isNode} on import.\n* \n* @type {boolean}\n*/\nexport const IS_NODE = isNode();\n\n/**\n* the *environment* dictates how things are built and behave\n* (versus \"app instance\", which declares *where* it's running / what it's\n* doing -- see {@link .appInstance}).\n* \n* the value is read from the `NODE_ENV` environment variable at \n* `process.env.NODE_ENV` on the server and from `window.ENV` on the client.\n* \n* if neither of these are found, throws a {@link StateError}.\n* \n* the environment can be set to anything, though unless you have given\n* considerable through and uncovered sufficient reason, it should probably \n* be one of:\n* \n* 1.  `development` (default)\n* 2.  `production`\n* 3.  `test`\n* \n* libraries and apps can of course respond to these values however they like,\n* but the general thematic should follow:\n* \n* 1.  **`development`** (default)\n*     \n*     built and configured for development and debugging. this env\n*     should make it as easy as possible to work on the app, at the \n*     expense of performance.\n*     \n*     things we expect in the development environment:\n*     \n*     -   lots of logging available.\n*         -   means [metalog][] is not stripping anything accept\n*             perhaps `trace` logging at compile time (via `.babelrc`\n*             config -- can still filter in runtime of course).\n*     -   quick and clear access to source code.\n*         -   no [minification][] or concatenation.\n*         -   source maps where necessary.\n*     -   tcomb type checking\n*         -   tcomb skips most checks in `production` mode by default, but it\n*             should be checking and throwing errors when things fail in \n*             `development`.\n*     -   fail early and often\n*         -   while it makes sense to try and continue on in `production`, when\n*             in `development` anything unexpected should throw an error\n*             immediately.\n*    \n* 2.  **`production`**\n*     \n*     built and configured for performance.\n*     \n* 3.  **`test`**\n*     \n*     the environment set inside testing processes (mocha or whatever else).\n*     \n*     generally the same as `development`, with potential modifications to \n*     support testing. \n*     \n*     be aware that if testing frameworks are using ES2015+ source they will\n*     be doing the transformation under the `test` environment, and be sure\n*     to cover it in `.babelrc` if using `env` switching.\n* \n* [minification]: https://en.wikipedia.org/wiki/Minification_(programming)\n* [metalog]: https://github.com/nrser/babel-plugin-metalog\n* \n* @return {string}\n*   the environment name.\n* \n* @throws {StateError}\n*   if we can't determine that we're in a node or browser environment.\n*/\nexport function env() {\n  if (IS_NODE) {\n    return process.env.NODE_ENV || DEFAULT_ENV;\n    \n  } else if (IS_BROWSER) {\n    return window.ENV || DEFAULT_ENV;\n    \n  } else {\n    // TODO we might want to just proceed somehow with what we can find,\n    //      but for the moment fuck it just throw.\n    throw errors.StateError.squish(`\n      can't detect browser OR node environment.\n    `);\n    \n  }\n} // .env\n\n/**\n* the *app instance* is an identifier for *where* the app is deployed that \n* build settings and runtime behavior can be dependent on. it is read from\n* the `NODE_APP_INSTANCE` environment variable on the server \n* \n* \n* \n* @return {?string}\n*   the app instance name (if any).\n*/\nexport function appInstance() {\n  \n}\n",
    "static": true,
    "longname": "src/env.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "DEFAULT_ENV",
    "memberof": "src/env.js",
    "static": true,
    "longname": "src/env.js~DEFAULT_ENV",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{DEFAULT_ENV}",
    "description": "the default environment returned by {@link .env} when none is set.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "isBrowser",
    "memberof": "src/env.js",
    "static": true,
    "longname": "src/env.js~isBrowser",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{isBrowser}",
    "description": "determine if we're in the browser by seeing if the top-level object is\n`window`.",
    "lineNumber": 21,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if we're in a browser environment."
    },
    "type": {
      "types": [
        "Function"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "isNode",
    "memberof": "src/env.js",
    "static": true,
    "longname": "src/env.js~isNode",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{isNode}",
    "description": "determine if we're in node by seeing if the top-level object is `global`.",
    "lineNumber": 31,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if we're in a node environment."
    },
    "type": {
      "types": [
        "Function"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "name": "IS_BROWSER",
    "memberof": "src/env.js",
    "static": true,
    "longname": "src/env.js~IS_BROWSER",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{IS_BROWSER}",
    "description": "constant that is the result of calling {@link isBrowser} on import.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "IS_NODE",
    "memberof": "src/env.js",
    "static": true,
    "longname": "src/env.js~IS_NODE",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{IS_NODE}",
    "description": "constant that is the result of calling {@link isNode} on import.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 22,
    "kind": "function",
    "name": "env",
    "memberof": "src/env.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/env.js~env",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{env}",
    "description": "the *environment* dictates how things are built and behave\n(versus \"app instance\", which declares *where* it's running / what it's\ndoing -- see {@link .appInstance}).\n\nthe value is read from the `NODE_ENV` environment variable at \n`process.env.NODE_ENV` on the server and from `window.ENV` on the client.\n\nif neither of these are found, throws a {@link StateError}.\n\nthe environment can be set to anything, though unless you have given\nconsiderable through and uncovered sufficient reason, it should probably \nbe one of:\n\n1.  `development` (default)\n2.  `production`\n3.  `test`\n\nlibraries and apps can of course respond to these values however they like,\nbut the general thematic should follow:\n\n1.  **`development`** (default)\n    \n    built and configured for development and debugging. this env\n    should make it as easy as possible to work on the app, at the \n    expense of performance.\n    \n    things we expect in the development environment:\n    \n    -   lots of logging available.\n        -   means [metalog][] is not stripping anything accept\n            perhaps `trace` logging at compile time (via `.babelrc`\n            config -- can still filter in runtime of course).\n    -   quick and clear access to source code.\n        -   no [minification][] or concatenation.\n        -   source maps where necessary.\n    -   tcomb type checking\n        -   tcomb skips most checks in `production` mode by default, but it\n            should be checking and throwing errors when things fail in \n            `development`.\n    -   fail early and often\n        -   while it makes sense to try and continue on in `production`, when\n            in `development` anything unexpected should throw an error\n            immediately.\n   \n2.  **`production`**\n    \n    built and configured for performance.\n    \n3.  **`test`**\n    \n    the environment set inside testing processes (mocha or whatever else).\n    \n    generally the same as `development`, with potential modifications to \n    support testing. \n    \n    be aware that if testing frameworks are using ES2015+ source they will\n    be doing the transformation under the `test` environment, and be sure\n    to cover it in `.babelrc` if using `env` switching.\n\n[minification]: https://en.wikipedia.org/wiki/Minification_(programming)\n[metalog]: https://github.com/nrser/babel-plugin-metalog",
    "lineNumber": 118,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the environment name."
    },
    "throws": [
      {
        "types": [
          "StateError"
        ],
        "description": "if we can't determine that we're in a node or browser environment."
      }
    ]
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "appInstance",
    "memberof": "src/env.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/env.js~appInstance",
    "access": null,
    "export": true,
    "importPath": "nrser/src/env.js",
    "importStyle": "{appInstance}",
    "description": "the *app instance* is an identifier for *where* the app is deployed that \nbuild settings and runtime behavior can be dependent on. it is read from\nthe `NODE_APP_INSTANCE` environment variable on the server ",
    "lineNumber": 145,
    "params": [],
    "return": {
      "nullable": true,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the app instance name (if any)."
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "src/errors/BaseError.js",
    "content": "/**\n* create a BaseError class when we're outside of Meteor.\n* \n* adapted from Meteor's `error.js`.\n* \n* @see https://github.com/meteor/meteor/blob/release/METEOR%401.4.0.1/packages/meteor/errors.js\n* \n*/\n\n// deps\nimport _ from '//src/lodash';\n\n// package\nimport print from '../print';\nimport { squish } from '../string';\n\n/**\n* adapted from Meteor's\n* {@link https://github.com/meteor/meteor/blob/release/METEOR%401.4.0.1/packages/meteor/helpers.js helpers.js}\n* and used to make {@link BaseError} extend {@link Error}.\n* \n* Sets child's prototype to a new object whose prototype is parent's\n* prototype.\n* \n* @example <caption>Used as:</caption>\n* Meteor._inherits(ClassB, ClassA).\n* _.extend(ClassB.prototype, { ... })\n* \n* Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.\n*/\nfunction _inherits(Child, Parent) {\n  // copy Parent static properties\n  for (var key in Parent) {\n    // make sure we only copy hasOwnProperty properties vs. prototype\n    // properties\n    if (_.has(Parent, key))\n      Child[key] = Parent[key];\n  }\n\n  // a middle member of prototype chain: takes the prototype from the Parent\n  var Middle = function () {\n    this.constructor = Child;\n  };\n  Middle.prototype = Parent.prototype;\n  Child.prototype = new Middle();\n  Child.__super__ = Parent.prototype;\n  return Child;\n}\n\n/**\n* \"name\" of the error.\n*/\nconst name = 'BaseError';\n\n/**\n* BaseError constructor.\n*/\nfunction constructor(message, details) {\n  this.error = this.constructor.name;\n  this.reason = message || this.constructor.defaultMessage;\n  this.message = `${ message } [${ this.error }]`;\n  this.details = details;  \n}\n\n/**\n*\n*/\nexport const BaseError = function(message, details) {\n  // Ensure we get a proper stack trace in most Javascript environments\n  if (Error.captureStackTrace) {\n    // V8 environments (Chrome and Node.js)\n    Error.captureStackTrace(this, BaseError);\n  } else {\n    // Borrow the .stack property of a native Error object.\n    this.stack = new Error().stack;\n  }\n  // Safari magically works.\n  \n  // add details to message if provided\n  if (typeof details !== 'undefined') {\n    message += \"\\n\" + print(details);\n  }\n\n  constructor.apply(this, [message, details]);\n\n  this.errorType = name;\n}\n\nBaseError.squish = function(message, details): BaseError {\n  return new this(squish(message), details);\n}\n\n// make BaseError inherit from \n_inherits(BaseError, Error);",
    "static": true,
    "longname": "src/errors/BaseError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "_inherits",
    "memberof": "src/errors/BaseError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/BaseError.js~_inherits",
    "access": null,
    "export": false,
    "importPath": "nrser/src/errors/BaseError.js",
    "importStyle": null,
    "description": "adapted from Meteor's\n{@link https://github.com/meteor/meteor/blob/release/METEOR%401.4.0.1/packages/meteor/helpers.js helpers.js}\nand used to make {@link BaseError} extend {@link Error}.\n\nSets child's prototype to a new object whose prototype is parent's\nprototype.",
    "examples": [
      "<caption>Used as:</caption>\nMeteor._inherits(ClassB, ClassA).\n_.extend(ClassB.prototype, { ... })\n\nInspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`."
    ],
    "lineNumber": 31,
    "params": [
      {
        "name": "Child",
        "types": [
          "*"
        ]
      },
      {
        "name": "Parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "variable",
    "name": "name",
    "memberof": "src/errors/BaseError.js",
    "static": true,
    "longname": "src/errors/BaseError.js~name",
    "access": null,
    "export": false,
    "importPath": "nrser/src/errors/BaseError.js",
    "importStyle": null,
    "description": "\"name\" of the error.",
    "lineNumber": 53,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "function",
    "name": "constructor",
    "memberof": "src/errors/BaseError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/BaseError.js~constructor",
    "access": null,
    "export": false,
    "importPath": "nrser/src/errors/BaseError.js",
    "importStyle": null,
    "description": "BaseError constructor.",
    "lineNumber": 58,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 28,
    "kind": "function",
    "name": "BaseError",
    "memberof": "src/errors/BaseError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/BaseError.js~BaseError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/BaseError.js",
    "importStyle": "{BaseError}",
    "description": "",
    "lineNumber": 68,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 29,
    "kind": "function",
    "name": "squish",
    "memberof": "src/errors/BaseError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/errors/BaseError.js~squish",
    "access": null,
    "export": false,
    "importPath": "nrser/src/errors/BaseError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "details",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 30,
    "kind": "file",
    "name": "src/errors/KeyError.js",
    "content": "import { NrserError } from './NrserError.js';\n\n/**\n* thrown when fetching \n*/\nexport class KeyError extends NrserError {\n  \n}",
    "static": true,
    "longname": "src/errors/KeyError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 31,
    "kind": "class",
    "name": "KeyError",
    "memberof": "src/errors/KeyError.js",
    "static": true,
    "longname": "src/errors/KeyError.js~KeyError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/KeyError.js",
    "importStyle": "{KeyError}",
    "description": "thrown when fetching ",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/NrserError.js~NrserError"
    ]
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "src/errors/MatchError.js",
    "content": "import { NrserError } from './NrserError.js';\n\n/**\n* thrown when a value fails to match a pattern in `match()`\n*/\nexport class MatchError extends NrserError {}",
    "static": true,
    "longname": "src/errors/MatchError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "class",
    "name": "MatchError",
    "memberof": "src/errors/MatchError.js",
    "static": true,
    "longname": "src/errors/MatchError.js~MatchError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/MatchError.js",
    "importStyle": "{MatchError}",
    "description": "thrown when a value fails to match a pattern in `match()`",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/NrserError.js~NrserError"
    ]
  },
  {
    "__docId__": 34,
    "kind": "file",
    "name": "src/errors/NotFoundError.js",
    "content": "import { BaseError } from './BaseError.js';\n\n/**\n* throw when something isn't found.\n*/\nexport class NotFoundError extends BaseError {\n}",
    "static": true,
    "longname": "src/errors/NotFoundError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 35,
    "kind": "class",
    "name": "NotFoundError",
    "memberof": "src/errors/NotFoundError.js",
    "static": true,
    "longname": "src/errors/NotFoundError.js~NotFoundError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/NotFoundError.js",
    "importStyle": "{NotFoundError}",
    "description": "throw when something isn't found.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/BaseError.js~BaseError"
    ]
  },
  {
    "__docId__": 36,
    "kind": "file",
    "name": "src/errors/NotImplementedError.js",
    "content": "import { BaseError } from './BaseError.js';\n\n/**\n* throw when a method needs to be implemented by a subclass.\n*/\nexport class NotImplementedError extends BaseError {\n  static defaultMessage = 'this method must be implemented in subclasses';\n}",
    "static": true,
    "longname": "src/errors/NotImplementedError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 37,
    "kind": "class",
    "name": "NotImplementedError",
    "memberof": "src/errors/NotImplementedError.js",
    "static": true,
    "longname": "src/errors/NotImplementedError.js~NotImplementedError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/NotImplementedError.js",
    "importStyle": "{NotImplementedError}",
    "description": "throw when a method needs to be implemented by a subclass.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/BaseError.js~BaseError"
    ]
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "defaultMessage",
    "memberof": "src/errors/NotImplementedError.js~NotImplementedError",
    "static": true,
    "longname": "src/errors/NotImplementedError.js~NotImplementedError.defaultMessage",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "src/errors/NrserError.js",
    "content": "import { BaseError } from './BaseError.js';\n\n/**\n* base error class for this package.\n*/\nexport class NrserError extends BaseError {}",
    "static": true,
    "longname": "src/errors/NrserError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "class",
    "name": "NrserError",
    "memberof": "src/errors/NrserError.js",
    "static": true,
    "longname": "src/errors/NrserError.js~NrserError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/NrserError.js",
    "importStyle": "{NrserError}",
    "description": "base error class for this package.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/BaseError.js~BaseError"
    ]
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "src/errors/StateError.js",
    "content": "import { BaseError } from './BaseError';\n\n/**\n* thrown when something is in the wrong state for an operation to succeed.\n*/\nexport class StateError extends BaseError {}",
    "static": true,
    "longname": "src/errors/StateError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 42,
    "kind": "class",
    "name": "StateError",
    "memberof": "src/errors/StateError.js",
    "static": true,
    "longname": "src/errors/StateError.js~StateError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/StateError.js",
    "importStyle": "{StateError}",
    "description": "thrown when something is in the wrong state for an operation to succeed.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/errors/BaseError.js~BaseError"
    ]
  },
  {
    "__docId__": 43,
    "kind": "file",
    "name": "src/errors/ValueError.js",
    "content": "import { BaseError } from './BaseError.js';\n\n/**\n* thrown when a value is not acceptable (versus it being a TypeError if it's\n* the wrong type).\n*/\nexport class ValueError extends BaseError {}",
    "static": true,
    "longname": "src/errors/ValueError.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 44,
    "kind": "class",
    "name": "ValueError",
    "memberof": "src/errors/ValueError.js",
    "static": true,
    "longname": "src/errors/ValueError.js~ValueError",
    "access": null,
    "export": true,
    "importPath": "nrser/src/errors/ValueError.js",
    "importStyle": "{ValueError}",
    "description": "thrown when a value is not acceptable (versus it being a TypeError if it's\nthe wrong type).",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/errors/BaseError.js~BaseError"
    ]
  },
  {
    "__docId__": 45,
    "kind": "file",
    "name": "src/errors/index.js",
    "content": "export * from './BaseError';\nexport * from './NrserError';\nexport * from './KeyError';\nexport * from './MatchError';\nexport * from './ValueError';\nexport * from './NotImplementedError';\nexport * from './NotFoundError';\nexport * from './StateError';\n",
    "static": true,
    "longname": "src/errors/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 46,
    "kind": "file",
    "name": "src/fs.js",
    "content": "/**\n* file system stuff\n* \n* extends fs-extra with other things i want / need\n*/\n\nimport _ from '//src/lodash';\nimport fsExtra from 'fs-extra';\nimport Promise from 'bluebird';\n\ntype Stats = {\n  isDirectory: () => boolean,\n};\n\n/**\n* fsExtra, cloned and extended.\n*/\nexport const fs = _.clone(fsExtra);\n\nfs.statPromise = Promise.promisify(fs.stat);\n\n/**\n* async check if a path is a directory. accepts a callback that is fired \n* with `null` followed by `true` or `false` (never errors back).\n*/\nexport function isDir(path: string): Promise<boolean> {\n  return fs.statPromise(path)\n    .then((stats: Stats) => {\n      return stats.isDirectory();\n    })\n    .catch((error: Error) => {\n      return false;\n    });\n}\nfs.isDir = isDir;\n\n/**\n* sync version of isDir.\n*/\nexport function isDirSync(path: string): boolean {\n  try {\n    const stats: Stats = fs.statSync(path);\n    return stats.isDirectory();\n  } catch(error) {\n    return false;\n  }\n}\nfs.isDirSync = isDirSync;\n\n\n// /**\n// *\n// */\n// var path       = require('path')\n//   , fs         = require('fs')\n//   , exists     = fs.exists || path.exists\n//   , existsSync = fs.existsSync || path.existsSync\n//   ;\n// \n// function splitPath(path) {\n//   var parts = path.split(/(\\/|\\\\)/);\n//   if (!parts.length) return parts;\n// \n//   // when path starts with a slash, the first part is empty string\n//   return !parts[0].length ? parts.slice(1) : parts;\n// }\n// \n// exports = module.exports = function (currentFullPath, clue, cb) {\n// \n//   function testDir(parts) {\n//     if (parts.length === 0) return cb(null, null);\n// \n//     var p = parts.join('');\n// \n//     exists(path.join(p, clue), function (itdoes) {\n//       if (itdoes) return cb(null, p);\n//       testDir(parts.slice(0, -1));\n//     });\n//   }\n// \n//   testDir(splitPath(currentFullPath));\n// }\n// \n// exports.sync = function (currentFullPath, clue) {\n// \n//   function testDir(parts) {\n//     if (parts.length === 0) return null;\n// \n//     var p = parts.join('');\n// \n//     var itdoes = existsSync(path.join(p, clue));\n//     return itdoes ? p : testDir(parts.slice(0, -1));\n//   }\n// \n//   return testDir(splitPath(currentFullPath));\n// }\n\nexport default fs;\n",
    "static": true,
    "longname": "src/fs.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 47,
    "kind": "variable",
    "name": "fs",
    "memberof": "src/fs.js",
    "static": true,
    "longname": "src/fs.js~fs",
    "access": null,
    "export": true,
    "importPath": "nrser/src/fs.js",
    "importStyle": "{fs}",
    "description": "fsExtra, cloned and extended.",
    "lineNumber": 18,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "function",
    "name": "isDir",
    "memberof": "src/fs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fs.js~isDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/fs.js",
    "importStyle": "{isDir}",
    "description": "async check if a path is a directory. accepts a callback that is fired \nwith `null` followed by `true` or `false` (never errors back).",
    "lineNumber": 26,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "isDirSync",
    "memberof": "src/fs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/fs.js~isDirSync",
    "access": null,
    "export": true,
    "importPath": "nrser/src/fs.js",
    "importStyle": "{isDirSync}",
    "description": "sync version of isDir.",
    "lineNumber": 40,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "src/index.js",
    "content": "// @flow\n\n// re-exports\n// ==========\n// \n// the idea is to let dependent packages just use the versions from here,\n// automatically keeping them on the same version w/o having to go around\n// upgrading everywhere to prevent multiple versions of libraries getting\n// installed - just upgrade the nrser version and then dependent libs address\n// compatibility when upgrading nrser.\n// \n// this should (hopefully) help keep everything in sync easier.\n// \n// dependencies not re-exported are incorporated into other exports.\n// \nexport { default as chalk } from 'chalk';\nexport { default as Promise } from 'bluebird';\nexport { default as minimatch } from 'minimatch';\n\nimport { IS_NODE, IS_BROWSER } from './env';\n\nexport * from './env.js';\n\nexport * from './errors';\nexport * from './Deferred';\nexport * from './object';\nexport * from './string';\nexport * from './collection';\nexport * from './match';\nexport * from './array';\nexport * from './lodash';\n\n// our types extend tcomb's\nimport tcomb from 'tcomb';\nimport * as nrserTypes from './types';\n\nexport const types = {\n  ...tcomb,\n  ...nrserTypes,\n}\nexport const t = types;\n\nexport { default as print } from './print';\nexport * as metalogger from './metalogger';\n\nexport * as Path from './path';\n// legacy\nexport * as path from './path';\n\nexport let FS;\n// legacy\nexport let fs;\n\nif (IS_NODE) {\n  FS = fs = require('./fs').default;\n}\n",
    "static": true,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "types",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~types",
    "access": null,
    "export": true,
    "importPath": "nrser/src/index.js",
    "importStyle": "{types}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{...tcomb: Object, ...nrserTypes: Object}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "t",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~t",
    "access": null,
    "export": true,
    "importPath": "nrser/src/index.js",
    "importStyle": "{t}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "file",
    "name": "src/lodash.js",
    "content": "import lodash from 'lodash';\n\nexport const _ = lodash.runInContext();\n\nexport default _;\n",
    "static": true,
    "longname": "src/lodash.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "_",
    "memberof": "src/lodash.js",
    "static": true,
    "longname": "src/lodash.js~_",
    "access": null,
    "export": true,
    "importPath": "nrser/src/lodash.js",
    "importStyle": "{_}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/match.js",
    "content": "import _ from '//src/lodash';\nimport t from 'tcomb';\nimport { j } from './string.js';\n\nimport * as errors from './errors';\n\nexport function match(value, ...clauses) {\n  for (let i = 0, len = clauses.length; i < len; i += 2) {\n    const pattern = clauses[i];\n    const output = clauses[i + 1];\n    \n    // console.log({pattern, output});\n\n    if (\n      (t.isType(pattern) && pattern.is(value)) ||\n      (typeof pattern === 'function' && value instanceof pattern) ||\n      value === pattern\n    ) {\n      if (_.isFunction(output)) {\n        return output(value);\n      } else {\n        return output;\n      }\n    }\n  }\n  \n  let message = j`value ${ value } failed to match `;\n  for (let i = 0, len = clauses.length; i < len; i += 2) {\n    const type = clauses[i];\n    \n    if (t.isType(type)) {\n      message += t.getTypeName(type);\n    } else {\n      message += type;\n    }\n    \n    if (i != len - 1) {\n      message += ' | ';\n    }\n  }\n  \n  throw new errors.MatchError(message, {value});\n};",
    "static": true,
    "longname": "src/match.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "match",
    "memberof": "src/match.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/match.js~match",
    "access": null,
    "export": true,
    "importPath": "nrser/src/match.js",
    "importStyle": "{match}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "clauses",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "file",
    "name": "src/metalogger/Level.js",
    "content": "// @flow\n\nimport _ from '//src/lodash';\nimport type { $Refinement } from 'tcomb';\nimport * as errors from '../errors';\n\nconst LEVELS = {\n  fatal: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n  debug: 4,\n  trace: 5,\n};\n\nexport const LEVEL_NAME_PAD_LENGTH = _.chain(LEVELS)\n  .keys()\n  .map(name => name.length)\n  .max()\n  .value();\n\nconst LEVEL_RANKS: Array<number> = _.values(LEVELS);\n\nfunction isLevelName(string: string) {\n  return _.has(LEVELS, string);\n}\n\nexport type LevelName = \"fatal\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"trace\";\n\nfunction isLevelRank(number: number) {\n  return _.includes(LEVEL_RANKS, number);\n}\n\nexport type LevelRank = number & $Refinement<typeof isLevelRank>;\n\nexport class Level {\n  name: LevelName;\n  rank: LevelRank;\n  \n  static FATAL: Level = new Level({name: 'fatal', rank: LEVELS.fatal});\n  static ERROR: Level = new Level({name: 'error', rank: LEVELS.error});\n  static WARN:  Level = new Level({name: 'warn',  rank: LEVELS.warn});\n  static INFO:  Level = new Level({name: 'info',  rank: LEVELS.info});\n  static DEBUG: Level = new Level({name: 'debug', rank: LEVELS.debug});\n  static TRACE: Level = new Level({name: 'trace', rank: LEVELS.trace});\n  \n  static LEVELS: Array<Level> = [\n    Level.FATAL,\n    Level.ERROR,\n    Level.WARN,\n    Level.INFO,\n    Level.DEBUG,\n    Level.TRACE,\n  ];\n  \n  static forName(name: LevelName): Level {\n    // flow doesn't like dynamic prop access...\n    switch (name) {\n      case 'fatal':\n        return this.FATAL;\n      case 'error':\n        return this.ERROR;\n      case 'warn':\n        return this.WARN;\n      case 'info':\n        return this.INFO;\n      case 'debug':\n        return this.DEBUG;\n      case 'trace':\n        return this.TRACE;\n      default:\n        throw new errors.ValueError(`bad level name: ${ name }`, {name});\n    }\n  }\n  \n  constructor({name, rank}: {name: LevelName, rank: LevelRank}) {\n    this.name = name;\n    this.rank = rank;\n  }\n}\n",
    "static": true,
    "longname": "src/metalogger/Level.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "LEVELS",
    "memberof": "src/metalogger/Level.js",
    "static": true,
    "longname": "src/metalogger/Level.js~LEVELS",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"fatal\": *, \"error\": number, \"warn\": number, \"info\": number, \"debug\": number, \"trace\": number}"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "LEVEL_NAME_PAD_LENGTH",
    "memberof": "src/metalogger/Level.js",
    "static": true,
    "longname": "src/metalogger/Level.js~LEVEL_NAME_PAD_LENGTH",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": "{LEVEL_NAME_PAD_LENGTH}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "LEVEL_RANKS",
    "memberof": "src/metalogger/Level.js",
    "static": true,
    "longname": "src/metalogger/Level.js~LEVEL_RANKS",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "isLevelName",
    "memberof": "src/metalogger/Level.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Level.js~isLevelName",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "isLevelRank",
    "memberof": "src/metalogger/Level.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Level.js~isLevelRank",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "Level",
    "memberof": "src/metalogger/Level.js",
    "static": true,
    "longname": "src/metalogger/Level.js~Level",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/Level.js",
    "importStyle": "{Level}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "name",
    "memberof": "src/metalogger/Level.js~Level",
    "static": false,
    "longname": "src/metalogger/Level.js~Level#name",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "rank",
    "memberof": "src/metalogger/Level.js~Level",
    "static": false,
    "longname": "src/metalogger/Level.js~Level#rank",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "FATAL",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.FATAL",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "ERROR",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.ERROR",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "WARN",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.WARN",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "INFO",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.INFO",
    "access": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "DEBUG",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.DEBUG",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "TRACE",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.TRACE",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "LEVELS",
    "memberof": "src/metalogger/Level.js~Level",
    "static": true,
    "longname": "src/metalogger/Level.js~Level.LEVELS",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "forName",
    "memberof": "src/metalogger/Level.js~Level",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Level.js~Level.forName",
    "access": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/metalogger/Level.js~Level",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Level.js~Level#constructor",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *, \"rank\": *}"
        ],
        "defaultRaw": {
          "name": null,
          "rank": null
        },
        "defaultValue": "{\"name\":null,\"rank\":null}"
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "name",
    "memberof": "src/metalogger/Level.js~Level",
    "static": false,
    "longname": "src/metalogger/Level.js~Level#name",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "rank",
    "memberof": "src/metalogger/Level.js~Level",
    "static": false,
    "longname": "src/metalogger/Level.js~Level#rank",
    "access": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/metalogger/LevelSpec.js",
    "content": "import minimatch from 'minimatch';\nimport _ from '//src/lodash';\n\nimport { Level } from './Level';\nimport type { LevelName } from './Level';\n\nexport type SpecQuery = {\n  path: string,\n  content: Array<*>,\n};\n\nexport type SpecProps = {\n  level: LevelName,\n  path?: string,\n  content?: string,\n};\n\nexport class LevelSpec {\n  level: Level;\n  path: ?string;\n  pathPattern: ?string;\n  content: ?RegExp;\n  _cache: Object;\n  \n  static minimatchize(s: string): string {\n    return s.replace(/\\:/g, '/');\n  }\n  \n  constructor(props: SpecProps) {\n    this.level = Level.forName(props.level);\n    \n    if (props.path) {\n      this.path = props.path;\n      this.pathPattern = this.constructor.minimatchize(props.path)\n    }\n    \n    if (props.content) {\n      this.content = new RegExp(props.content);\n    }\n    \n    this._cache = {};\n  }\n  \n  cache(key, getter) {\n    if (!_.has(this._cache, key)) {\n      this._cache[key] = getter();\n    }\n    return this._cache[key];\n  }\n  \n  match(query: SpecQuery): boolean {\n    return _.every([\n      this.matchPath(query.path),\n      this.matchContent(query.content),\n    ]);\n  }\n  \n  matchPath(path: string): boolean {\n    // there is no path info so it always matches\n    if (!this.pathPattern) {\n      return true;\n    }\n    \n    return this.cache(`path=${ path }`, () => {\n      return minimatch(this.constructor.minimatchize(path), this.pathPattern);\n    });\n  }\n  \n  matchContent(content: Array<*>): boolean {\n    // there is no content info so it always matches\n    if (!this.content) {\n      return true;\n    }\n    \n    // otherwise join all the strings in the message content array and\n    // see if the content RegExp matches\n    \n    return !!_.filter(content, _.isString).join(' ').match(this.content);\n  }\n}",
    "static": true,
    "longname": "src/metalogger/LevelSpec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "LevelSpec",
    "memberof": "src/metalogger/LevelSpec.js",
    "static": true,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/LevelSpec.js",
    "importStyle": "{LevelSpec}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "level",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#level",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "path",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#path",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "pathPattern",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#pathPattern",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "content",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#content",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "_cache",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#_cache",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "minimatchize",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec.minimatchize",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#constructor",
    "access": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "level",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#level",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "path",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#path",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "pathPattern",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#pathPattern",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "content",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#content",
    "access": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "_cache",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#_cache",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "cache",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#cache",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "getter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "match",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#match",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "matchPath",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#matchPath",
    "access": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "matchContent",
    "memberof": "src/metalogger/LevelSpec.js~LevelSpec",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/LevelSpec.js~LevelSpec#matchContent",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/metalogger/Logger.js",
    "content": "/**\n* new logger for use with babel-plugin-metalog\n* \n* adapted from nrser.Logger, which was adapted from pince\n* \n* https://github.com/mad-eye/pince\n* \n*/\n\nimport _ from '//src/lodash';\nimport t from 'tcomb';\nimport minimatch from 'minimatch';\n\nimport { IS_NODE, IS_BROWSER } from '../env';\nimport print from '../print';\nimport type { NonNegativeInteger } from '../types/number';\n\nimport { Level, LEVEL_NAME_PAD_LENGTH } from './Level';\nimport type { LevelName } from './Level';\nimport { LevelSpec } from './LevelSpec';\nimport type { SpecQuery, SpecProps } from './LevelSpec';\nimport { snapshot } from './snapshot';\n\n// optional requires that may or may not be present\n\nlet notifier;\ntry {\n  notifier = require('node-notifier');\n} catch (e) {}\n\nlet chalk;\ntry {\n  chalk = require('chalk');\n} catch (e) {}\n\n// types\n// =====\n\ntype RefsLabel =  \"errorRefs\" |\n                  \"warnRefs\" | \n                  \"infoRefs\" | \n                  \"debugRefs\" | \n                  \"traceRefs\";\n\n// type NotifLabel = \n\n/**\n* raw message that the METALOG plugin generates as the argument to `METALOG()`\n* (or whatever global function call is configured).\n* \n* this is basically just what i found in babel-plugin-trace with a few\n* small changes.\n*/\ntype MetalogMessage = {\n  label: string, // LevelName,\n  filename: string,\n  filepath: string,\n  content: Array<*>,\n  line: number,\n  parentPath: Array<string>,\n};\n\n/**\n* message we craft in the runtime out of the MetalogMessage with properties\n* we need to actually output.\n*/\ntype LogMessage = {\n  // level of the message\n  level: Level,\n  \n  // if we should log refs (as `console.log` and friends normally do) instead\n  // of trying to snapshot the values\n  refs: boolean,\n  \n  // if we should try to generate a system notification in addition to logging\n  // the message\n  notif: boolean,\n  \n  // level formatted for output\n  formattedLevel: string,\n  \n  // datetime of the log call\n  date: Date,\n  \n  // date formatted for output\n  formattedDate: string,\n  \n  // the path to the log site that we output,\n  // which is <filename>:<parentPath>:<line>\n  path: string,\n  \n  // ms since last message logged\n  delta: ?number,\n  \n  // delta formatted for output\n  formattedDelta: string,\n  \n  // the content from the MetalogMessage\n  content: Array<*>,\n}\n\nexport class Logger {\n  lastMessageDate: ?Date;\n  specs: Array<LevelSpec>;\n  nodeHeaderFormat: string;\n  browserHeaderFormat: string;\n  dateFormat: string;\n  notifTitle: string;\n  \n  // constants\n  // =========\n  \n  static HEADER_FORMAT_TOKENS = {\n    '%date':  (message: LogMessage): string => message.formattedDate,\n    // '%level': (message: LogMessage) => COLORS[message.level](data.level),\n    '%level': (message: LogMessage): string => message.formattedLevel,\n    '%delta': (message: LogMessage): string => message.formattedDelta,\n    '%path':  (message: LogMessage): string => message.path,\n  };\n  \n  /**\n  * tokens in date format string are replaced with result of calling\n  * the function with the date.\n  */\n  static DATE_FORMAT_TOKENS = {\n    'YYYY': (d: Date): string => _.padStart(d.getFullYear(), 4, \"0\"),\n    'MM':   (d: Date): string => _.padStart(d.getMonth() + 1, 2, \"0\"),\n    'DD':   (d: Date): string => _.padStart(d.getDate(), 2, \"0\"),\n    'HH':   (d: Date): string => _.padStart(d.getHours(), 2, \"0\"),\n    'mm':   (d: Date): string => _.padStart(d.getMinutes(), 2, \"0\"),\n    'ss':   (d: Date): string => _.padStart(d.getSeconds(), 2, \"0\"),\n    'SSS':  (d: Date): string => _.padStart(d.getMilliseconds(), 3, \"0\"),\n  };\n  \n  static BROWSER_COLORS = {\n    error: '#CC0C39', //'#d8292f',\n    warn: '#E6781E', // '#d39100',\n    info: '#1693A7', // '#337ab7',\n    debug: '#00548b',\n    trace: '#a3aaae',\n  };\n  \n  static NODE_COLORS = chalk ? {\n    error: chalk.red,\n    warn: chalk.yellow,\n    info: chalk.blue,\n    debug: chalk.cyan,\n    trace: chalk.gray,\n  } : {\n    error: x => x,\n    warn: x => x,\n    info: x => x,\n    debug: x => x,\n    trace: x => x,\n  };\n  \n  // static methods\n  // ==============\n  \n  static format(\n    data: *,\n    formatStr: string,\n    tokens: {[token: string]: Function},\n  ): string {\n    let result: string = formatStr;\n    _.each(tokens, (formatter, token) => {\n      if (_.includes(formatStr, token)) {\n        result = result.replace(new RegExp(token, 'g'), formatter(data));\n      }\n    });\n    return result;\n  }\n  \n  /**\n  * format a date according to a format string, see `.DATE_FORMAT_TOKENS` for\n  * the available tokens.\n  */\n  static formatDate(date: Date, formatStr: string): string {\n    return this.format(date, formatStr, this.DATE_FORMAT_TOKENS);\n  }\n  \n  /**\n  * format a header according to a format string, see `.HEADER_FORMAT_TOKENS`\n  * for the available tokens.\n  */\n  static formatHeader(message: LogMessage, formatStr: string): string {\n    return this.format(message, formatStr, this.HEADER_FORMAT_TOKENS);\n  }\n  \n  /**\n  * the string output of the level.\n  */\n  static formatLevel(level: Level): string {\n    return _.padEnd(\n      level.name.toUpperCase(),\n      LEVEL_NAME_PAD_LENGTH\n    );\n  }\n  \n  /**\n  * formats a delta in ms for output.\n  * \n  * when:\n  * \n  * -   delta is undefined (first message), returns \"+----ms\"\n  * -   the delta is 9999 or less, returns something like \"+0888ms\"\n  * -   the delta is over 9999, returns \"+++++ms\"\n  */\n  static formatDelta(delta: ?NonNegativeInteger): string {\n    let digits = '----';\n    \n    if (typeof delta !== 'undefined') {\n      if (delta > 9999) {\n        digits = '++++';\n        \n      } else {\n        digits = _.padStart(delta, 4, '0');\n        \n      }\n    }\n    \n    return `+${ digits }ms`;\n  }\n  \n  /**\n  * formats the path consisting of filename, parentPath and line for output.\n  */\n  static formatPath(rawMessage: MetalogMessage): string {\n    const path = [rawMessage.filename];\n    \n    if (!_.isEmpty(rawMessage.parentPath)) {\n      path.push(\n        _.map(rawMessage.parentPath, (segment: string) => {\n          if (segment.match(/\\[anonymous\\@\\d+\\]/)) {\n            return \"?\";\n          }\n          return segment;\n        }).join(':')\n      );\n    }\n    \n    path.push(rawMessage.line);\n    \n    return path.join(':');\n  }\n  \n  // ========\n  \n  constructor({\n    nodeHeaderFormat = \"%date (%delta) %level [%path]\",\n    browserHeaderFormat = \"(%delta) %level [%path]\",\n    dateFormat = \"YYYY-MM-DD HH:mm:ss.SSS\",\n    notifTitle = 'METALOGGER',\n    levelSpecs,\n  }: {\n    nodeHeaderFormat: string,\n    browserHeaderFormat: string,\n    dateFormat: string,\n    notifTitle: string,\n  } = {}) {\n    this.nodeHeaderFormat = nodeHeaderFormat;\n    this.browserHeaderFormat = browserHeaderFormat;\n    this.dateFormat = dateFormat;\n    this.notifTitle = notifTitle;\n    this.specs = [];\n    \n    if (levelSpecs) {\n      _.each(levelSpecs, (spec) => this.pushSpec(spec));\n    }\n  } // constructor\n  \n  // instance methods\n  // ================\n  \n  /**\n  * adds a spec to the end of the specs array (least priority).\n  * returns the spec.\n  */\n  pushSpec(spec: LevelSpec | SpecProps): LevelSpec {\n    if (!(spec instanceof LevelSpec)) {\n      spec = new LevelSpec(spec);\n    }\n    \n    this.specs.push(spec);\n    \n    return spec;\n  }\n  \n  /**\n  * adds a spec to the beginning of the specs (highest priority).\n  * returns the spec.\n  */\n  unshiftSpec(spec: LevelSpec | SpecProps): LevelSpec {\n    if (!(spec instanceof LevelSpec)) {\n      spec = new LevelSpec(spec);\n    }\n    \n    this.spec.unshift(spec);\n    \n    return spec;\n  }\n  \n  /**\n  * sends a system notification if the node-notifier package is available.\n  */\n  notify(message: LogMessage) {\n    if (notifier) {      \n      notifier.notify({\n        title: this.notifTitle,\n        message: (\n          message.formattedLevel + \"\\n\" + \n          _.map(message.content, (obj) => {\n            if (typeof obj === 'string') {\n              return obj;\n            } else {\n              return print(obj);\n            }\n          }).join(\"\\n\")\n        ),\n      });\n    }\n  }\n  \n  /**\n  * find the active level spec given spec query properties from a log message, \n  * which is the first spec for which `LevelSpec#match` returns true.\n  * \n  * - query: SpecQuery\n  * \n  * \n  * returns `undefined` if no spec matches.\n  */\n  specFor(query: SpecQuery): ?LevelSpec {\n    return _.find(this.specs, (spec: LevelSpec) => spec.match(query));\n  }\n  \n  /**\n  * get the level from the spec for a query, if any match.\n  */\n  levelFor(query: SpecQuery): ?Level {\n    const spec: ?LevelSpec = this.specFor(query);\n    \n    if (spec) {\n      return spec.level;\n    }\n    \n    return; // undefined\n  }\n  \n  /**\n  * determines if a message should be logged given level and spec query info\n  * by finding the applicable level spec and seeing if it's level is \n  */\n  shouldLog(level: Level, query : SpecQuery): boolean {\n    const currentLevel: ?Level = this.levelFor(query);\n    \n    if (!currentLevel) {\n      // we don't have any matching level spec so log everything\n      return true;\n    }\n    \n    return level.rank <= currentLevel.rank;\n  }\n  \n  /**\n  * log a message unless filtered by a level spec.\n  */\n  log(rawMessage: MetalogMessage): boolean {\n    let refs: boolean = false;\n    let notif: boolean = false;\n    let levelName: string = rawMessage.label;\n    \n    // plain 'notif' label is logged as 'info' level\n    if (levelName === 'notif') {\n      notif = true;\n      levelName = 'info';\n    }\n    \n    if (_.includes(levelName, 'Refs')) {\n      refs = true;\n      levelName = levelName.replace('Refs', '');\n    }\n    \n    if (_.includes(levelName, 'Notif')) {\n      notif = true;\n      levelName = levelName.replace('Notif', '');\n    }\n    \n    const path: string = this.constructor.formatPath(rawMessage);\n    \n    const level: Level = Level.forName(levelName);\n    const query: SpecQuery = {\n      content: rawMessage.content,\n      path,\n    };\n    \n    // bail now if there is a spec filtering out this message\n    if (!this.shouldLog(level, query)) {\n      return false;\n    }\n    \n    const now: Date = new Date();\n    const delta: ?NonNegativeInteger = this.getDelta(now);\n    // set the last message date so `#getDelta` will work\n    // do it here so an error outputting won't break `#getDelta`\n    this.lastMessageDate = now;\n    \n    // now we know we're going to output\n    // form the log message\n    const logMessage: LogMessage = {\n      level,\n      refs,\n      notif,\n      formattedLevel: this.constructor.formatLevel(level),\n      date: now,\n      formattedDate: this.constructor.formatDate(now, this.dateFormat),\n      path,\n      delta,\n      formattedDelta: this.constructor.formatDelta(delta),\n      content: rawMessage.content,\n    };\n    \n    // do environment-dependent output\n    if (IS_NODE) {\n      this.logInNode(logMessage);\n    } else if (IS_BROWSER) {\n      this.logInBrowser(logMessage);\n    } else {\n      throw new Error(\"don't seem to be in node or the browser, can't log\");\n    }\n    \n    // signal that we output the log\n    return true;\n  } // log\n  \n  /**\n  * gets the ms since the last message was logged, or undefined if it's the\n  * first.\n  */\n  getDelta(now: Date): ?NonNegativeInteger {\n    if (this.lastMessageDate) {\n      return now - this.lastMessageDate;\n    }\n  }\n  \n  /**\n  * get the proper `console.*` function for the log level.\n  */\n  getConsoleFunction(level: Level): Function {\n    if (IS_BROWSER) {\n      return console.log;\n    }\n    \n    let fn: Function;\n    \n    switch (level.name) {\n      case 'trace':\n        return console.debug || console.log;\n        \n      case 'debug':\n        return console.debug || console.log;\n        \n      case 'info': \n        fn = console.info || console.log;\n        break;\n      \n      case 'warn':\n        fn = console.warn || console.log;\n        break;\n        \n      case 'error':\n        fn = console.error || console.log;\n        break;\n      \n      default:\n        throw new TypeError(`bad level name?! ${ level.name }`);\n    }\n    \n    return fn;\n  }\n  \n  /**\n  * log the message in node, where we don't need to fuck with\n  * values vs. references like we do on the browser since it get spits out\n  * text at that time. we also have colors there (easily).\n  * \n  * gonna try out the `print` npm package for display.\n  * \n  * https://www.npmjs.com/package/print\n  */\n  logInNode(message: LogMessage): void {\n    const header: string = this.constructor.NODE_COLORS[message.level.name](\n      this.constructor.formatHeader(\n        message,\n        this.nodeHeaderFormat\n      )\n    );\n    \n    const dumps: Array<string> = _.map(message.content, (value: *): string => {\n      if (typeof value === 'string') {\n        return value;\n      } else {\n        return print(value);\n      }\n    });\n    \n    this.getConsoleFunction(message.level).call(console, header, ...dumps);\n    \n    // send a notif if needed\n    if (message.notif) {\n      this.notify(message);\n    }\n  }\n  \n  /**\n  * log the message in the browser, where we want to log the actual\n  * objects so we can explore them in the console, but usually want to log\n  * snapshots of the values as they were at the times they were logged.\n  */\n  logInBrowser(message: LogMessage): void {\n    const header: string = this.constructor.formatHeader(\n      message,\n      this.browserHeaderFormat\n    );\n    \n    this.getConsoleFunction(message.level).call(\n      console,\n      `%c ${ header }`,\n      `color: ${ this.constructor.BROWSER_COLORS[message.level.name] };`,\n      ...(message.refs ? message.content : snapshot(message.content))\n    );\n  }\n  \n} // class Logger\n\n",
    "static": true,
    "longname": "src/metalogger/Logger.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "Logger",
    "memberof": "src/metalogger/Logger.js",
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/Logger.js",
    "importStyle": "{Logger}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "lastMessageDate",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#lastMessageDate",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "specs",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#specs",
    "access": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "nodeHeaderFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#nodeHeaderFormat",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "browserHeaderFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#browserHeaderFormat",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "dateFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#dateFormat",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "notifTitle",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#notifTitle",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "HEADER_FORMAT_TOKENS",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.HEADER_FORMAT_TOKENS",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"%date\": *, \"%level\": *, \"%delta\": *, \"%path\": *}"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "DATE_FORMAT_TOKENS",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.DATE_FORMAT_TOKENS",
    "access": null,
    "description": "tokens in date format string are replaced with result of calling\nthe function with the date.",
    "lineNumber": 125,
    "type": {
      "types": [
        "{\"YYYY\": *, \"MM\": *, \"DD\": *, \"HH\": *, \"mm\": *, \"ss\": *, \"SSS\": *}"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "BROWSER_COLORS",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.BROWSER_COLORS",
    "access": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"error\": string, \"warn\": string, \"info\": string, \"debug\": string, \"trace\": string}"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "NODE_COLORS",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.NODE_COLORS",
    "access": null,
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "format",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.format",
    "access": null,
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "formatStr",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokens",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "formatDate",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.formatDate",
    "access": null,
    "description": "format a date according to a format string, see `.DATE_FORMAT_TOKENS` for\nthe available tokens.",
    "lineNumber": 178,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      },
      {
        "name": "formatStr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "formatHeader",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.formatHeader",
    "access": null,
    "description": "format a header according to a format string, see `.HEADER_FORMAT_TOKENS`\nfor the available tokens.",
    "lineNumber": 186,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "formatStr",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "formatLevel",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.formatLevel",
    "access": null,
    "description": "the string output of the level.",
    "lineNumber": 193,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "formatDelta",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.formatDelta",
    "access": null,
    "description": "formats a delta in ms for output.\n\nwhen:\n\n-   delta is undefined (first message), returns \"+----ms\"\n-   the delta is 9999 or less, returns something like \"+0888ms\"\n-   the delta is over 9999, returns \"+++++ms\"",
    "lineNumber": 209,
    "params": [
      {
        "name": "delta",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "formatPath",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/Logger.js~Logger.formatPath",
    "access": null,
    "description": "formats the path consisting of filename, parentPath and line for output.",
    "lineNumber": 228,
    "params": [
      {
        "name": "rawMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#constructor",
    "access": null,
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "optional": true,
        "types": [
          "{\"nodeHeaderFormat\": *, \"browserHeaderFormat\": *, \"dateFormat\": *, \"notifTitle\": *, \"levelSpecs\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "nodeHeaderFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#nodeHeaderFormat",
    "access": null,
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "browserHeaderFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#browserHeaderFormat",
    "access": null,
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "dateFormat",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#dateFormat",
    "access": null,
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "notifTitle",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#notifTitle",
    "access": null,
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "specs",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#specs",
    "access": null,
    "description": null,
    "lineNumber": 265,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "pushSpec",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#pushSpec",
    "access": null,
    "description": "adds a spec to the end of the specs array (least priority).\nreturns the spec.",
    "lineNumber": 279,
    "params": [
      {
        "name": "spec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "unshiftSpec",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#unshiftSpec",
    "access": null,
    "description": "adds a spec to the beginning of the specs (highest priority).\nreturns the spec.",
    "lineNumber": 293,
    "params": [
      {
        "name": "spec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "notify",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#notify",
    "access": null,
    "description": "sends a system notification if the node-notifier package is available.",
    "lineNumber": 306,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "specFor",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#specFor",
    "access": null,
    "description": "find the active level spec given spec query properties from a log message, \nwhich is the first spec for which `LevelSpec#match` returns true.\n\n- query: SpecQuery\n\n\nreturns `undefined` if no spec matches.",
    "lineNumber": 333,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "levelFor",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#levelFor",
    "access": null,
    "description": "get the level from the spec for a query, if any match.",
    "lineNumber": 340,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "shouldLog",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#shouldLog",
    "access": null,
    "description": "determines if a message should be logged given level and spec query info\nby finding the applicable level spec and seeing if it's level is ",
    "lineNumber": 354,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      },
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "log",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#log",
    "access": null,
    "description": "log a message unless filtered by a level spec.",
    "lineNumber": 368,
    "params": [
      {
        "name": "rawMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "lastMessageDate",
    "memberof": "src/metalogger/Logger.js~Logger",
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#lastMessageDate",
    "access": null,
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getDelta",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#getDelta",
    "access": null,
    "description": "gets the ms since the last message was logged, or undefined if it's the\nfirst.",
    "lineNumber": 440,
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "getConsoleFunction",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#getConsoleFunction",
    "access": null,
    "description": "get the proper `console.*` function for the log level.",
    "lineNumber": 449,
    "params": [
      {
        "name": "level",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "logInNode",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#logInNode",
    "access": null,
    "description": "log the message in node, where we don't need to fuck with\nvalues vs. references like we do on the browser since it get spits out\ntext at that time. we also have colors there (easily).\n\ngonna try out the `print` npm package for display.\n\nhttps://www.npmjs.com/package/print",
    "lineNumber": 491,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "logInBrowser",
    "memberof": "src/metalogger/Logger.js~Logger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/Logger.js~Logger#logInBrowser",
    "access": null,
    "description": "log the message in the browser, where we want to log the actual\nobjects so we can explore them in the console, but usually want to log\nsnapshots of the values as they were at the times they were logged.",
    "lineNumber": 520,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/metalogger/index.js",
    "content": "import { Logger } from './Logger';\n\nexport const DEFAULT_LOGGER = new Logger();\n\nif (!global.METALOG) {\n  global.METALOG = DEFAULT_LOGGER.log.bind(DEFAULT_LOGGER);\n}\n\nexport * from './Level';\nexport * from './LevelSpec';\nexport * from './Logger';\n\n",
    "static": true,
    "longname": "src/metalogger/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "DEFAULT_LOGGER",
    "memberof": "src/metalogger/index.js",
    "static": true,
    "longname": "src/metalogger/index.js~DEFAULT_LOGGER",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/index.js",
    "importStyle": "{DEFAULT_LOGGER}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "src/metalogger/Logger.js~Logger"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/metalogger/snapshot.js",
    "content": "/**\n* take a baseClone of an object so that it can be explored in the browser\n* in the state is was **at the time**.\n* \n* pretty much lodash's cloneDeep changed to not just return empty objects when\n* it can't clone something.\n*/\n\nvar Stack = require('lodash/_Stack'),\n    arrayEach = require('lodash/_arrayEach'),\n    assignValue = require('lodash/_assignValue'),\n    baseAssign = require('lodash/_baseAssign'),\n    cloneBuffer = require('lodash/_cloneBuffer'),\n    copyArray = require('lodash/_copyArray'),\n    copySymbols = require('lodash/_copySymbols'),\n    getAllKeys = require('lodash/_getAllKeys'),\n    getTag = require('lodash/_getTag'),\n    initCloneArray = require('lodash/_initCloneArray'),\n    initCloneByTag = require('lodash/_initCloneByTag'),\n    initCloneObject = require('lodash/_initCloneObject'),\n    isArray = require('lodash/isArray'),\n    isBuffer = require('lodash/isBuffer'),\n    isObject = require('lodash/isObject'),\n    keys = require('lodash/keys');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n* used to wrap an un-clonable value so we know\n*/\nexport class SNAPSHOT_REF {\n  constructor(value) {\n    this.value = value;\n  }\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return new SNAPSHOT_REF(value);\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport function snapshot(value) {\n  return baseClone(value, true, true);\n}\n",
    "static": true,
    "longname": "src/metalogger/snapshot.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "Stack",
    "memberof": "src/metalogger/snapshot.js",
    "static": true,
    "longname": "src/metalogger/snapshot.js~Stack",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": null,
    "description": "take a baseClone of an object so that it can be explored in the browser\nin the state is was **at the time**.\n\npretty much lodash's cloneDeep changed to not just return empty objects when\nit can't clone something.",
    "lineNumber": 9,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "argsTag",
    "memberof": "src/metalogger/snapshot.js",
    "static": true,
    "longname": "src/metalogger/snapshot.js~argsTag",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": null,
    "description": "`Object#toString` result references.",
    "lineNumber": 27,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "arrayBufferTag",
    "memberof": "src/metalogger/snapshot.js",
    "static": true,
    "longname": "src/metalogger/snapshot.js~arrayBufferTag",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "cloneableTags",
    "memberof": "src/metalogger/snapshot.js",
    "static": true,
    "longname": "src/metalogger/snapshot.js~cloneableTags",
    "access": null,
    "export": false,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": null,
    "description": "Used to identify `toStringTag` values supported by `_.clone`.",
    "lineNumber": 56,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "SNAPSHOT_REF",
    "memberof": "src/metalogger/snapshot.js",
    "static": true,
    "longname": "src/metalogger/snapshot.js~SNAPSHOT_REF",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": "{SNAPSHOT_REF}",
    "description": "used to wrap an un-clonable value so we know",
    "lineNumber": 74,
    "interface": false
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/metalogger/snapshot.js~SNAPSHOT_REF",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/metalogger/snapshot.js~SNAPSHOT_REF#constructor",
    "access": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "value",
    "memberof": "src/metalogger/snapshot.js~SNAPSHOT_REF",
    "static": false,
    "longname": "src/metalogger/snapshot.js~SNAPSHOT_REF#value",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "baseClone",
    "memberof": "src/metalogger/snapshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/snapshot.js~baseClone",
    "access": "private",
    "export": false,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": null,
    "description": "The base implementation of `_.clone` and `_.cloneDeep` which tracks\ntraversed objects.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Returns the cloned value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to clone."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isDeep",
        "description": "Specify a deep clone."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "isFull",
        "description": "Specify a clone including symbols."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "customizer",
        "description": "The function to customize cloning."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "key",
        "description": "The key of `value`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "object",
        "description": "The parent object of `value`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stack",
        "description": "Tracks traversed objects and their clone counterparts."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Returns the cloned value."
    }
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "snapshot",
    "memberof": "src/metalogger/snapshot.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/metalogger/snapshot.js~snapshot",
    "access": null,
    "export": true,
    "importPath": "nrser/src/metalogger/snapshot.js",
    "importStyle": "{snapshot}",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/object.js",
    "content": "// @flow\n\nimport t from 'tcomb';\n\nimport _ from '//src/lodash';\nimport { j, squish } from '//src/string.js';\nimport { KeyError } from '//src/errors';\nimport { eachAsArray } from '//src/array';\n\nimport type { KeyPath, Collection }  from '//src/types/collection';\nimport type { Type } from '//src/types/type';\n\n/**\n* like lodash/underscore `groupBy` but the iteratee (called `getGroups` here)\n* should return an array of string group names and the value will be added to\n* **all** those groups in the result.\n*/\nexport function groupByEach<V>(\n  collection: Collection<V>,\n  \n  getGroups: (\n    value: V,\n    index: string | number,\n    collection: Collection<V>,\n  ) => Array<string>,\n  \n  context?: Object\n): {[group: string]: Array<V>} {\n  // \n  let result: {[group: string]: Array<V>} = {};\n  \n  _.each(collection, (value: V, index: string | number): void => {\n    const groups: Array<string> = getGroups.call(\n      context,\n      value,\n      index,\n      collection\n    );\n    \n    _.each(groups, (group: string) => {\n      if (_.has(result, group)) {\n        result[group].push(value);\n      } else {\n        result[group] = [value];\n      }\n    });\n  });\n  \n  return result;\n} // groupByEach()\n\n\n/**\n* Set `keyPath` to `value` in `object` only if the key does not exist. The key\n* path must be completely absent -- if it is set to `undefined` or `null` \n* an error will still be thrown.\n* \n* **Mutates `object`.**\n* \n* @param {Object} object\n*   Object to insert into.\n* \n* @param {KeyPath} keyPath\n*   Key path to insert at.\n* \n* @param {*} value\n*   Value to insert.\n* \n* @return {Object}\n*   The mutated object.\n* \n* @throws {KeyError}\n*   If `keyPath` exists in `object`.\n*/\nexport function insert(object: Object, keyPath: KeyPath, value: any): Object {\n  if (_.has(object, keyPath)) {\n    throw KeyError.squish(`Key path ${ keyPath } exists in object.`, {\n      keyPath,\n      currentValue: _.get(object, keyPath),\n      object\n    });\n  }\n  \n  return _.set(object, keyPath, value);\n}\n\n\n/**\n* Shallow merges `objects` together into a new {@link Object} as long as there\n* are no conflicting keys.\n* \n* @param {...Object} objects\n*   Objects to merge.\n* \n* @return {Object}\n*   New object assembled from `objects`.\n* \n* @throws {KeyError}\n*   If any of `objects` share keys.\n*/\nexport function assemble(...objects: Array<Object>): Object {\n  // Objects(objects);\n  \n  const result = {};\n  \n  _.each(objects, (object) => {\n    _.each(object, (value, key) => {\n      if (_.has(result, key)) {\n        throw new KeyError(\n          j`merge conflict for key ${ key }`,\n          {objects}\n        );\n      }\n      \n      result[key] = value;\n    });\n  });\n  \n  return result;\n} // assemble()\n\n\n/**\n* gets the value at a key path from an object, throwing `KeyError`\n* if the result is `undefined`.\n*\n* @param {Object} object\n*   the object to retrieve from.\n* \n* @param {?KeyPath} keyPath\n*   the path to the key.\n* \n* @param {Object} options\n* @property {*} defaultValue\n*   Value to default to if `keyPath` is not found.\n* \n* @return {*}\n*   The value at `keyPath`.\n*/\nexport function need(\n  object: Object,\n  keyPath?: KeyPath,\n  {\n    defaultValue,\n    type,\n  }: {\n    defaultValue?: mixed,\n    type?: Type,\n  } = {}\n): * {\n  const result = _.isEmpty(keyPath) ? (\n    object\n  ) : (\n    _.get(object, keyPath)\n  );\n  \n  if (result === undefined) {\n    if (defaultValue === undefined) {\n      let keyPathStr: string;\n      \n      if (keyPath === undefined) {\n        keyPathStr = 'undefined';\n      } else if (Array.isArray(keyPath)) {\n        keyPathStr = keyPath.join('.');\n      } else {\n        keyPathStr = keyPath;\n      }\n      \n      throw new KeyError(\n        `key ${ keyPathStr } not found`,\n        {object, keyPath}\n      );\n    } else {\n      // we're going to use the default value\n      \n      // check it's type if one was provided -- this makes it so when type\n      // is specified the function will always return something that is of \n      // that type if it succeeds.\n      if (type) {\n        t.assert(type.is(defaultValue), () => squish`\n          needed default value ${ t.assert.stringify(defaultValue) }\n          of type '${ typeof defaultValue }'\n          to be of type ${ t.getTypeName(type) }\n          (looking for missing key path ${ t.assert.stringify(keyPath) })\n        `);\n      }\n      \n      return defaultValue;\n    }\n  }\n  \n  if (type) {\n    t.assert(type.is(result), () => squish`\n      needed value ${ t.assert.stringify(result) }\n      of type '${ typeof result }'\n      at key path ${ t.assert.stringify(keyPath) }\n      to be of type ${ t.getTypeName(type) }.\n    `);\n  }\n  \n  return result;\n}\n\n/**\n* A pickier [_.pick][] -- throw a {@link KeyError} if any of `paths` are \n* missing.\n* \n* [_.pick]: https://lodash.com/docs/4.17.4#pick\n*/\nexport function procure<V>(\n  object: {[key: string]: V},\n  paths: string | Array<string>,\n  {\n    defaultValue,\n    type,\n  }: {\n    defaultValue: mixed,\n    type: Type,\n  } = {}\n): {[key: string]: V} {\n  const result = {};\n  \n  eachAsArray(paths, (path) => {\n    _.set(result, path, need(object, path, {defaultValue, type}));\n  });\n  \n  return result;\n}\n\n\n/**\n* map values but drop keys where the mapped value is undefined.\n*/\nexport function mapDefinedValues<DOMAIN, CODOMAIN>(\n  obj: {[key: string]: DOMAIN},\n  iteratee: (value: DOMAIN, key: string) => CODOMAIN\n): {[key: string]: CODOMAIN} {\n  const results: {[key: string]: CODOMAIN} = {};\n  \n  _.each(obj, (value: DOMAIN, key: string): void => {\n    const result = iteratee(value, key);\n    if (result !== undefined) {\n      results[key] = result;\n    }\n  });\n  \n  return results;\n}\n\n_.mixin({\n  insert,\n  need,\n  assemble,\n  procure,\n  mapDefinedValues,\n});\n",
    "static": true,
    "longname": "src/object.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "groupByEach",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~groupByEach",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{groupByEach}",
    "description": "like lodash/underscore `groupBy` but the iteratee (called `getGroups` here)\nshould return an array of string group names and the value will be added to\n**all** those groups in the result.",
    "lineNumber": 18,
    "params": [
      {
        "name": "collection",
        "types": [
          "*"
        ]
      },
      {
        "name": "getGroups",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "insert",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~insert",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{insert}",
    "description": "Set `keyPath` to `value` in `object` only if the key does not exist. The key\npath must be completely absent -- if it is set to `undefined` or `null` \nan error will still be thrown.\n\n**Mutates `object`.**",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Object to insert into."
      },
      {
        "nullable": null,
        "types": [
          "KeyPath"
        ],
        "spread": false,
        "optional": false,
        "name": "keyPath",
        "description": "Key path to insert at."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value to insert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The mutated object."
    },
    "throws": [
      {
        "types": [
          "KeyError"
        ],
        "description": "If `keyPath` exists in `object`."
      }
    ]
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "assemble",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~assemble",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{assemble}",
    "description": "Shallow merges `objects` together into a new {@link Object} as long as there\nare no conflicting keys.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Object"
        ],
        "spread": true,
        "optional": false,
        "name": "objects",
        "description": "Objects to merge."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "New object assembled from `objects`."
    },
    "throws": [
      {
        "types": [
          "KeyError"
        ],
        "description": "If any of `objects` share keys."
      }
    ]
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "need",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~need",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{need}",
    "description": "gets the value at a key path from an object, throwing `KeyError`\nif the result is `undefined`.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object to retrieve from."
      },
      {
        "nullable": true,
        "types": [
          "KeyPath"
        ],
        "spread": false,
        "optional": false,
        "name": "keyPath",
        "description": "the path to the key."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "Value to default to if `keyPath` is not found."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value at `keyPath`."
    }
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "procure",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~procure",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{procure}",
    "description": "A pickier [_.pick][] -- throw a {@link KeyError} if any of `paths` are \nmissing.\n\n[_.pick]: https://lodash.com/docs/4.17.4#pick",
    "lineNumber": 210,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "paths",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern2",
        "optional": true,
        "types": [
          "{\"defaultValue\": *, \"type\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "mapDefinedValues",
    "memberof": "src/object.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/object.js~mapDefinedValues",
    "access": null,
    "export": true,
    "importPath": "nrser/src/object.js",
    "importStyle": "{mapDefinedValues}",
    "description": "map values but drop keys where the mapped value is undefined.",
    "lineNumber": 234,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "iteratee",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/path.js",
    "content": "// @flow\n\n\n// Imports\n// ==========================================================================\n\nimport StdlibPath from 'path';\nimport _ from '//src/lodash';\nimport _untildify from 'untildify';\nimport _tildify from 'tildify';\n\n\n// Types\n// ==========================================================================\n\nimport type { $Refinement, $Reify } from 'tcomb';\n\nimport t from 'tcomb';\n\n\n// Path Types\n// --------------------------------------------------------------------------\n\n// ### Normalized Path\n\n/** @private */\nfunction isNormalized(path: string): boolean {\n  return (\n    (\n      path === '.'\n    ) || (\n      path === '/'\n    ) || (\n      path !== '' && _.every(\n        path.split(StdlibPath.sep),\n        (seg, index, segs) => {\n          return (\n            seg !== '..'\n          ) && (\n            seg !== '.'\n          ) && (\n            index === 0 || index === segs.length - 1  || seg !== ''\n          );\n        }\n      )\n    )\n  );\n}\n\n/**\n* A normalized path is a path that is either:\n* \n* -   Exactly `.`.\n* -   Has no `.`, `..` or empty segments.\n* \n* Intended to represent the return type of [path.normalize][].\n* \n* [path.normalize]: https://nodejs.org/api/path.html#path_path_normalize_path\n* \n* @typedef {string} NormPath\n*/\nexport type NormPath = string & $Refinement<typeof isNormalized>;\n\n/**\n* tcomb type for {@link NormPath}.\n* \n* @type {Type}\n*/\nexport const tNormPath = (({}: any): $Reify<NormPath>);\n\n\n// ### Absolute Path\n\n/**\n* An absolute path, per Node's [path.isAbsolute][],\n* which returns `false` for tilde paths (`~/...`).\n* \n* [path.isAbsolute]: https://nodejs.org/api/path.html#path_path_isabsolute_path\n* \n* @typedef {string} AbsPath\n*/\nexport type AbsPath = string & $Refinement<typeof StdlibPath.isAbsolute>;\n\n/**\n* tcomb type for {@link AbsPath}.\n*\n* @type {Type}\n*/\nexport const tAbsPath = (({}: any): $Reify<AbsPath>);\n\n\n// ### Resolved Path\n\n/**\n* A resolved path is a path that is absolute and normalized, as returned from\n* Node's [path.resolve][].\n* \n* [path.resolve]: https://nodejs.org/api/path.html#path_path_resolve_path\n* \n* @typedef {string} ResolvedPath\n*/\nexport type ResPath = AbsPath & NormPath;\n\n/**\n* tcomb type for {@link ResPath}.\n* \n* @type {Type}\n*/\nexport const tResPath = (({}: any): $Reify<ResPath>);\n\n\n// ### Tilde Path\n\n/** @private */\nfunction isTildePath(path: string): boolean {\n  return path[0] === '~';\n}\n\n/**\n* A tilde path is a string that starts with '~', which we interpret like the\n* shell to mean the current user's home directory.\n* \n* @typedef {string} TildePath\n*/\nexport type TildePath = string & $Refinement<typeof isTildePath>;\n\n/**\n* tcomb type for {@link TildePath}.\n* \n* @type {Type}\n*/\nexport const tTildePath = (({}: any): $Reify<TildePath>);\n\n\n// ### Path Segment\n\n/** @private */\nfunction isPathSegment(str: string): boolean {\n  return str.indexOf(StdlibPath.sep) === -1;\n}\n\n/**\n* A piece of a path... which is a string that doesn't have the path \n* separator character in it.\n* \n* @typedef {string} PathSegment\n*/\nexport type PathSegment = string & $Refinement<typeof isPathSegment>;\n\n/**\n* tcomb type for {@link PathSegment}.\n* \n* @type {Type}\n*/\nexport const tPathSegment = (({}: any): $Reify<PathSegment>);\n\n/**\n* Many pieces of paths.\n* \n* @typedef {Array<string>} PathSegments\n*/\nexport type PathSegments = Array<PathSegment>;\n\n/**\n* tcomb type for {@link PathSegments}.\n* \n* @type {Type}\n*/\nexport const tPathSegments = (({}: any): $Reify<PathSegments>);\n\n\n// Directory Types\n// --------------------------------------------------------------------------\n\n// ### Directory Path\n\n/** @private */\nfunction isDirStr(path: string): boolean {\n  const last = _.last(split(path));\n  \n  return (\n    last === ''\n  ) || (\n    last === '.'\n  ) || (\n    last === '..'\n  );\n} // isDirStr()\n\n/**\n* A path that we know is a directory because it's last segment\n* is empty, `.` or `..`.\n* \n* @typedef {string} Dir\n*/\nexport type Dir = string & $Refinement<typeof isDirStr>;\n\n/**\n* tcomb type for {@link Dir}.\n* \n* @type {Type}\n*/\nexport const tDir = (({}: any): $Reify<Dir>);\n\n\n// ### Normalized Directory Path\n\n/**\n* A normalized directory - a {@link Dir} that is also a {@link NormPath}.\n* \n* @typedef {string} NormDir\n*/\nexport type NormDir = Dir & NormPath;\n\n/**\n* tcomb type for {@link NormDir}.\n* \n* @type {Type}\n*/\nexport const tNormDir = (({}: any): $Reify<NormDir>);\n\n\n// ### Absolute Directory Path\n\n/**\n* An absolute directory - a {@link Dir} that is also a {@link AbsPath}.\n* \n* @typedef {string} AbsDir\n*/\nexport type AbsDir = Dir & AbsPath;\n\n/**\n* tcomb type for {@link AbsDir}.\n* \n* @type {Type}\n*/\nexport const tAbsDir = (({}: any): $Reify<AbsDir>);\n\n\n// ### Resolved Directory Path\n\n/**\n* An resolved directory - a {@link Dir} that is also a {@link ResPath}.\n* \n* @typedef {string} ResDir\n*/\nexport type ResDir = Dir & ResPath;\n\n/**\n* tcomb type for {@link ResDir}.\n* \n* @type {Type}\n*/\nexport const tResDir = (({}: any): $Reify<ResDir>);\n\n\n// ### Tilde (~) Directory Path\n\n/**\n* A directory relative to the user's home via starting with `~` -\n* a {@link Dir} that is also a {@link TildePath}.\n* \n* @typedef {string} TildeDir\n*/\nexport type TildeDir = Dir & TildePath;\n\n/**\n* tcomb type for {@link TildeDir}.\n* \n* @type {Type}\n*/\nexport const tTildeDir = (({}: any): $Reify<TildeDir>);\n\n\n// Exports\n// ==========================================================================\n\n// re-export everything from stdlib path\nexport * from 'path';\n\n// export the tildify and untildify functions\nexport const untildify = _untildify;\nexport const tildify = _tildify;\n\n\n/**\n* Split a path by the system path separator.\n*/\nexport function split(path: string): PathSegments {\n  return path.split(StdlibPath.sep);\n}\n\n\n/**\n* Like {@link Path.resolve} but it expands tilde paths to the user's home\n* directory.\n* \n* @param {...string} paths\n*   Paths to expand. Joins them from last backwards until am absolute path is\n*   formed, otherwise assumes relative to {@link process.cwd}.\n* \n* @return {ResPath}\n*   Resolved (absolute) path.\n*/\nexport function expand(...paths: Array<string>): ResPath {\n  return StdlibPath.resolve(..._.map(paths, p => untildify(p)));\n}\n\n/**\n* @deprecated Old name for {@link expand}.\n*/\nexport const absolute = expand;\n\n\n/**\n* Find the common base path. Expands paths before comparison, and doesn't \n* consider '/' to be common because it is shared between *all* unix-y file\n* paths, making it a bit pointless.\n*/\nexport function commonBase(...paths: Array<string>): ?ResPath {\n  const splits = _.map(paths, (path: string): PathSegments => {\n    return split(expand(path))\n  });\n  \n  const common = _.reduce(\n    splits,\n    (common: PathSegments, segments: PathSegments): PathSegments => {\n      // short ciruit if we already know we can't match anything more\n      if (common.length === 0) {\n        return common;\n      }\n      \n      let i = 0;\n      const max = Math.max(common.length, segments.length);\n      \n      while (common[i] === segments[i] && i < max) { i++; }\n      \n      // short-circuit copy if it matched the whole thing\n      if (i === common.length) {\n        return common;\n      }\n      \n      return common.slice(0, i);\n    }\n  );\n  \n  if (common.length > 1) {\n    return StdlibPath.join('/', ...common);\n  }\n} // commonBase()\n\n\n/**\n* Make a path string into a {@link Dir} by appending `/` to it if needed.\n* \n* @param {string} path\n*   Path to convert.\n* \n* @return {Dir}\n*   Directory string.\n*/\nexport function toDir(path: string): Dir {\n  if (tDir.is(t.String(path))) {\n    return path;\n  }\n  \n  return tDir(path + '/');\n} // .toDir()\n\n/**\n* Resolve paths and apply {@link toDir} to the results to get a {@link ResDir}.\n* \n* **NOTICE** \n* \n* Unless you explicitly *don't* want tilde (`~/...`) expansion you probably\n* want to use {@link expandDir}, which expands paths that start with `~` to\n* the current user's home direcotry.\n* \n* @param {...string} paths\n*   Paths to resolve.\n* \n* @return {ResDir}\n*   Resolved directory path.\n*/\nexport function resolveDir(...paths: Array<string>): ResDir {\n  return tResDir(toDir(StdlibPath.resolve(...paths)));\n}\n\n\n/**\n* Expand paths and apply {@link toDir} to the results to get a {@link ResDir}.\n* \n* @param {...string} paths\n*   Paths to expand.\n* \n* @return {ResDir}\n*   Expanded directory path.\n*/\nexport function expandDir(...paths: Array<string>): ResDir {\n  return tResDir(toDir(expand(...paths)));\n}\n",
    "static": true,
    "longname": "src/path.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "isNormalized",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~isNormalized",
    "access": "private",
    "export": false,
    "importPath": "nrser/src/path.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "typedef",
    "name": "NormPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~NormPath",
    "access": null,
    "description": "A normalized path is a path that is either:\n\n-   Exactly `.`.\n-   Has no `.`, `..` or empty segments.\n\nIntended to represent the return type of [path.normalize][].\n\n[path.normalize]: https://nodejs.org/api/path.html#path_path_normalize_path",
    "lineNumber": 62,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "NormPath"
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "tNormPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tNormPath",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tNormPath}",
    "description": "tcomb type for {@link NormPath}.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "typedef",
    "name": "AbsPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~AbsPath",
    "access": null,
    "description": "An absolute path, per Node's [path.isAbsolute][],\nwhich returns `false` for tilde paths (`~/...`).\n\n[path.isAbsolute]: https://nodejs.org/api/path.html#path_path_isabsolute_path",
    "lineNumber": 82,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "AbsPath"
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "tAbsPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tAbsPath",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tAbsPath}",
    "description": "tcomb type for {@link AbsPath}.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "typedef",
    "name": "ResolvedPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~ResolvedPath",
    "access": null,
    "description": "A resolved path is a path that is absolute and normalized, as returned from\nNode's [path.resolve][].\n\n[path.resolve]: https://nodejs.org/api/path.html#path_path_resolve_path",
    "lineNumber": 102,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ResolvedPath"
    }
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "tResPath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tResPath",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tResPath}",
    "description": "tcomb type for {@link ResPath}.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "isTildePath",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~isTildePath",
    "access": "private",
    "export": false,
    "importPath": "nrser/src/path.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 115,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "typedef",
    "name": "TildePath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~TildePath",
    "access": null,
    "description": "A tilde path is a string that starts with '~', which we interpret like the\nshell to mean the current user's home directory.",
    "lineNumber": 125,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TildePath"
    }
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "tTildePath",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tTildePath",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tTildePath}",
    "description": "tcomb type for {@link TildePath}.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "isPathSegment",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~isPathSegment",
    "access": "private",
    "export": false,
    "importPath": "nrser/src/path.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 138,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "typedef",
    "name": "PathSegment",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~PathSegment",
    "access": null,
    "description": "A piece of a path... which is a string that doesn't have the path \nseparator character in it.",
    "lineNumber": 148,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "PathSegment"
    }
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "tPathSegment",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tPathSegment",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tPathSegment}",
    "description": "tcomb type for {@link PathSegment}.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "typedef",
    "name": "PathSegments",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~PathSegments",
    "access": null,
    "description": "Many pieces of paths.",
    "lineNumber": 162,
    "type": {
      "types": [
        "Array<string>"
      ],
      "optional": false,
      "name": "PathSegments"
    }
  },
  {
    "__docId__": 165,
    "kind": "variable",
    "name": "tPathSegments",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tPathSegments",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tPathSegments}",
    "description": "tcomb type for {@link PathSegments}.",
    "lineNumber": 169,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "isDirStr",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~isDirStr",
    "access": "private",
    "export": false,
    "importPath": "nrser/src/path.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 178,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "typedef",
    "name": "Dir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~Dir",
    "access": null,
    "description": "A path that we know is a directory because it's last segment\nis empty, `.` or `..`.",
    "lineNumber": 196,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "Dir"
    }
  },
  {
    "__docId__": 168,
    "kind": "variable",
    "name": "tDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tDir}",
    "description": "tcomb type for {@link Dir}.",
    "lineNumber": 203,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "typedef",
    "name": "NormDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~NormDir",
    "access": null,
    "description": "A normalized directory - a {@link Dir} that is also a {@link NormPath}.",
    "lineNumber": 213,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "NormDir"
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "tNormDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tNormDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tNormDir}",
    "description": "tcomb type for {@link NormDir}.",
    "lineNumber": 220,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "typedef",
    "name": "AbsDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~AbsDir",
    "access": null,
    "description": "An absolute directory - a {@link Dir} that is also a {@link AbsPath}.",
    "lineNumber": 230,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "AbsDir"
    }
  },
  {
    "__docId__": 172,
    "kind": "variable",
    "name": "tAbsDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tAbsDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tAbsDir}",
    "description": "tcomb type for {@link AbsDir}.",
    "lineNumber": 237,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "typedef",
    "name": "ResDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~ResDir",
    "access": null,
    "description": "An resolved directory - a {@link Dir} that is also a {@link ResPath}.",
    "lineNumber": 247,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ResDir"
    }
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "tResDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tResDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tResDir}",
    "description": "tcomb type for {@link ResDir}.",
    "lineNumber": 254,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "typedef",
    "name": "TildeDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~TildeDir",
    "access": null,
    "description": "A directory relative to the user's home via starting with `~` -\na {@link Dir} that is also a {@link TildePath}.",
    "lineNumber": 265,
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "TildeDir"
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "tTildeDir",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tTildeDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tTildeDir}",
    "description": "tcomb type for {@link TildeDir}.",
    "lineNumber": 272,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "untildify",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~untildify",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{untildify}",
    "description": null,
    "lineNumber": 282,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "tildify",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~tildify",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{tildify}",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "function",
    "name": "split",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~split",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{split}",
    "description": "Split a path by the system path separator.",
    "lineNumber": 289,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "expand",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~expand",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{expand}",
    "description": "Like {@link Path.resolve} but it expands tilde paths to the user's home\ndirectory.",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "paths",
        "description": "Paths to expand. Joins them from last backwards until am absolute path is\n  formed, otherwise assumes relative to {@link process.cwd}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ResPath"
      ],
      "spread": false,
      "description": "Resolved (absolute) path."
    }
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "absolute",
    "memberof": "src/path.js",
    "static": true,
    "longname": "src/path.js~absolute",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{absolute}",
    "description": "",
    "lineNumber": 312,
    "deprecated": "Old name for {@link expand}.",
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "commonBase",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~commonBase",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{commonBase}",
    "description": "Find the common base path. Expands paths before comparison, and doesn't \nconsider '/' to be common because it is shared between *all* unix-y file\npaths, making it a bit pointless.",
    "lineNumber": 320,
    "params": [
      {
        "name": "paths",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "toDir",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~toDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{toDir}",
    "description": "Make a path string into a {@link Dir} by appending `/` to it if needed.",
    "lineNumber": 362,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to convert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Dir"
      ],
      "spread": false,
      "description": "Directory string."
    }
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "resolveDir",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~resolveDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{resolveDir}",
    "description": "Resolve paths and apply {@link toDir} to the results to get a {@link ResDir}.\n\n**NOTICE** \n\nUnless you explicitly *don't* want tilde (`~/...`) expansion you probably\nwant to use {@link expandDir}, which expands paths that start with `~` to\nthe current user's home direcotry.",
    "lineNumber": 385,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "paths",
        "description": "Paths to resolve."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ResDir"
      ],
      "spread": false,
      "description": "Resolved directory path."
    }
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "expandDir",
    "memberof": "src/path.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/path.js~expandDir",
    "access": null,
    "export": true,
    "importPath": "nrser/src/path.js",
    "importStyle": "{expandDir}",
    "description": "Expand paths and apply {@link toDir} to the results to get a {@link ResDir}.",
    "lineNumber": 399,
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "paths",
        "description": "Paths to expand."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ResDir"
      ],
      "spread": false,
      "description": "Expanded directory path."
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/print.js",
    "content": "\"use strict\";\n\n/**\n* print npm package v1.0.1\n* https://raw.githubusercontent.com/Alhadis/Print/v1.0.1/print.js\n* \n* coppied here 'cause meteor is on fuckin' node v4.5.0 and print wants node\n* >=6.0.0 so we'll pass the source through babel.\n*/\n\n/**\n * Generate a human-readable representation of a value.\n *\n * @param {Mixed}   input\n * @param {Object}  options          - Optional parameters\n * @param {Boolean} ampedSymbols     - Prefix Symbol-keyed properties with @@\n * @param {Mixed}   escapeChars      - Which characters are escaped in string values\n * @param {Number}  maxArrayLength   - Maximum number of array values to show before truncating\n * @param {Boolean} showArrayIndices - Show the index of each element in an array\n * @param {Boolean} showArrayLength  - Display an array's \"length\" property after its values\n * @param {Boolean} sortProps        - Alphabetise the enumerable properties of printed objects\n * @param {Array<*>|*} omit \t\t\t\t\t - objects to omit from printing.\n * @return {String}\n */\nfunction print(input, options = {}, /*…Internal:*/ name = \"\", refs = null){\n\t\n\t/** Handle options/defaults */\n\tlet {\n\t\tampedSymbols,\n\t\tescapeChars,\n\t\tmaxArrayLength,\n\t\tshowArrayIndices,\n\t\tshowArrayLength,\n\t\tsortProps,\n\t\tomit\n\t} = options;\n\t\n\tampedSymbols   = undefined === ampedSymbols   ? true : ampedSymbols;\n\tescapeChars    = undefined === escapeChars    ? /(?!\\x20)\\s|\\\\/g : escapeChars;\n\tsortProps      = undefined === sortProps      ? true  : sortProps;\n\tmaxArrayLength = undefined === maxArrayLength ? 100   : (!+maxArrayLength ? false : maxArrayLength);\n\t\n\tif(omit !== undefined && !(omit instanceof Set)) {\n\t\tif (!Array.isArray(omit)) {\n\t\t\tomit = [omit];\n\t\t}\n\t\tomit = new Set(omit);\n\t\t\n\t\toptions = {...options, omit};\n\t}\n\n\tif(escapeChars && \"function\" !== typeof escapeChars)\n\t\tescapeChars = (function(pattern){\n\t\t\treturn function(input){\n\t\t\t\treturn input.replace(pattern, function(char){\n\t\t\t\t\tswitch(char){\n\t\t\t\t\t\tcase \"\\f\": return \"\\\\f\";\n\t\t\t\t\t\tcase \"\\n\": return \"\\\\n\";\n\t\t\t\t\t\tcase \"\\r\": return \"\\\\r\";\n\t\t\t\t\t\tcase \"\\t\": return \"\\\\t\";\n\t\t\t\t\t\tcase \"\\v\": return \"\\\\v\";\n\t\t\t\t\t\tcase \"\\\\\": return \"\\\\\\\\\";\n\t\t\t\t\t}\n\t\t\t\t\tconst cp  = char.codePointAt(0);\n\t\t\t\t\tconst hex = cp.toString(16).toUpperCase();\n\t\t\t\t\tif(cp < 0xFF) return \"\\\\x\" + hex;\n\t\t\t\t\treturn \"\\\\u{\" + hex + \"}\";\n\t\t\t\t});\n\t\t\t}\n\t\t}(escapeChars));\n\t\n\t\n\t/** Only thing that can't be checked with obvious methods */\n\tif(Number.isNaN(input)) return \"NaN\";\n\t\n\t/** Exact match */\n\tswitch(input){\n\t\t\n\t\t/** Primitives */\n\t\tcase null:      return \"null\";\n\t\tcase undefined: return \"undefined\";\n\t\tcase true:      return \"true\";\n\t\tcase false:     return \"false\";\n\t\t\n\t\t/** \"Special\" values */\n\t\tcase Math.E:                   return \"Math.E\";\n\t\tcase Math.LN10:                return \"Math.LN10\";\n\t\tcase Math.LN2:                 return \"Math.LN2\";\n\t\tcase Math.LOG10E:              return \"Math.LOG10E\";\n\t\tcase Math.LOG2E:               return \"Math.LOG2E\";\n\t\tcase Math.PI:                  return \"Math.PI\";\n\t\tcase Math.SQRT1_2:             return \"Math.SQRT1_2\";\n\t\tcase Math.SQRT2:               return \"Math.SQRT2\";\n\t\t\n\t\tcase Number.EPSILON:           return \"Number.EPSILON\";\n\t\tcase Number.MIN_VALUE:         return \"Number.MIN_VALUE\";\n\t\tcase Number.MAX_VALUE:         return \"Number.MAX_VALUE\";\n\t\tcase Number.MIN_SAFE_INTEGER:  return \"Number.MIN_SAFE_INTEGER\";\n\t\tcase Number.MAX_SAFE_INTEGER:  return \"Number.MAX_SAFE_INTEGER\";\n\t\tcase Number.NEGATIVE_INFINITY: return \"Number.NEGATIVE_INFINITY\";\n\t\tcase Number.POSITIVE_INFINITY: return \"Number.POSITIVE_INFINITY\";\n\t}\n\t\n\t/** Basic data types */\n\tconst type = Object.prototype.toString.call(input);\n\tswitch(type){\n\t\tcase \"[object Symbol]\":\n\t\tcase \"[object Number]\":  return input.toString();\n\t\tcase \"[object RegExp]\":  return `/${input.source}/${input.flags}`;\n\t\tcase \"[object String]\":{\n\t\t\tif(escapeChars)\n\t\t\t\tinput = escapeChars(input);\n\t\t\t\n\t\t\treturn `\"${input}\"`;\n\t\t}\n\t\tcase \"[object Date]\": {\n\t\t\treturn `Date(\"${ input }\")`;\n\t\t}\n\t}\n\t\n\t/** omit references in omit option */\n\tif(omit !== undefined && omit.has(input)) {\n\t\treturn \"-> {omitted}\";\n\t}\n\t\n\t/** Guard against circular references */\n\trefs = refs || new Map();\n\tif(refs.has(input))\n\t\treturn \"-> \" + (refs.get(input) || \"{input}\");\n\trefs.set(input, name);\n\t\n\t\n\t/** Begin compiling some serious output */\n\tlet output = \"\";\n\tlet typeName = \"\";\n\t\n\tlet arrayLike;\n\tlet isFunc;\n\tlet ignoreNumbers;\n\tlet padBeforeProps;\n\t\n\t\n\t/** Maps */\n\tif(\"[object Map]\" === type){\n\t\ttypeName = \"Map\";\n\t\t\n\t\tif(input.size){\n\t\t\tpadBeforeProps = true;\n\t\t\t\n\t\t\tlet index = 0;\n\t\t\tfor(let entry of input.entries()){\n\t\t\t\tconst namePrefix  = (name ? name : \"Map\") + \".entries\";\n\t\t\t\tconst keyString   = `${index}.` + \"key\";\n\t\t\t\tconst valueString = `${index}.` + \"value\";\n\t\t\t\t\n\t\t\t\tlet [key, value] = entry;\n\t\t\t\tkey   = print(key,   options, `${namePrefix}[${keyString}]`,   refs);\n\t\t\t\tvalue = print(value, options, `${namePrefix}[${valueString}]`, refs);\n\t\t\t\t\n\t\t\t\t/** Key */\n\t\t\t\tlet delim = /^->\\s/.test(key) ? \" \" : \" => \";\n\t\t\t\tlet str = keyString + delim + key;\n\t\t\t\t\n\t\t\t\t/** Value */\n\t\t\t\tdelim   = /^->\\s/.test(value) ? \" \" : \" => \";\n\t\t\t\tstr    += \"\\n\" + valueString + delim + value;\n\t\t\t\t\n\t\t\t\toutput += str + \"\\n\\n\";\n\t\t\t\t++index;\n\t\t\t}\n\t\t\t\n\t\t\toutput = \"\\n\" + output.replace(/(?:\\n\\s*\\n)+$/m, \"\");\n\t\t}\n\t}\n\t\n\t\n\t/** Sets */\n\telse if(\"[object Set]\" === type){\n\t\ttypeName = \"Set\";\n\t\t\n\t\tif(input.size){\n\t\t\tpadBeforeProps = true;\n\t\t\t\n\t\t\tlet index  = 0;\n\t\t\tfor(let value of input.values()){\n\t\t\t\tconst valueName = (name ? name : \"{input}\") + \".entries[\" + index + \"]\";\n\t\t\t\tvalue = print(value, options, valueName, refs);\n\t\t\t\t\n\t\t\t\tconst delim = /^->\\s/.test(value) ? \" \" : \" => \";\n\t\t\t\toutput += index + delim + value + \"\\n\";\n\t\t\t\t++index;\n\t\t\t}\n\t\t\t\n\t\t\toutput = \"\\n\" + output.replace(/(?:\\n\\t*\\n?)+$/, \"\");\n\t\t}\n\t}\n\t\n\t\n\t/** Objects, Arrays, and Functions */\n\telse{\n\t\tarrayLike     = \"function\" === typeof input[Symbol.iterator];\n\t\tisFunc        = \"function\" === typeof input;\n\t\tignoreNumbers = !showArrayIndices && arrayLike;\n\t}\n\t\n\t\n\t/** Obtain a list of every (non-symbolic) property to show */\n\tlet keys = Object.keys(input);\n\t\n\t/** Functions: Include name and arity */\n\tif(isFunc){\n\t\tif(-1 === keys.indexOf(\"name\"))    keys.push(\"name\");\n\t\tif(-1 === keys.indexOf(\"length\"))  keys.push(\"length\");\n\t}\n\t\n\t/** Errors: Include name and message */\n\telse if(input instanceof Error){\n\t\tif(-1 === keys.indexOf(\"name\"))    keys.push(\"name\");\n\t\tif(-1 === keys.indexOf(\"message\")) keys.push(\"message\");\n\t}\n\t\n\t/** Arrays: Add length if requested */\n\telse if(arrayLike && showArrayLength && -1 === keys.indexOf(\"length\"))\n\t\tkeys.push(\"length\");\n\t\n\n\t/** Clip lengthy arrays to a sensible limit */\n\tlet truncationNote = null;\n\tif(maxArrayLength !== false && arrayLike && input.length > maxArrayLength){\n\t\tkeys = keys.filter(k => +k != k || +k < maxArrayLength);\n\t\ttruncationNote = `\\n\\n… ${input.length - maxArrayLength} more values not shown\\n`;\n\t}\n\t\n\t\n\t/** Alphabetise each property name */\n\tif(sortProps) keys = keys.sort((a, b) => {\n\t\tlet A, B;\n\t\t\n\t\t/** Numbers: Compare algebraically */\n\t\tif((\"0\" == a || +a == a) && (\"0\" == b || +b == b)){\n\t\t\tA = +a;\n\t\t\tB = +b;\n\t\t}\n\t\t\n\t\t/** Anything else: Convert to lowercase */\n\t\telse{\n\t\t\tA = a.toLowerCase();\n\t\t\tB = b.toLowerCase();\n\t\t}\n\t\t\n\t\tif(A < B) return -1;\n\t\tif(A > B) return 1;\n\t\treturn 0;\n\t});\n\t\n\t\n\t/** Insert a blank line if existing lines have been printed for this object */\n\tif(padBeforeProps && keys.length)\n\t\toutput += \"\\n\";\n\t\n\t\n\t/** Regular properties */\n\tfor(let i = 0, l = keys.length; i < l; ++i){\n\t\tlet key      = keys[i];\n\t\t\n\t\t/** Array's been truncated, and this is the first non-numeric key */\n\t\tif(null !== truncationNote && +key != key){\n\t\t\toutput  += truncationNote;\n\t\t\ttruncationNote = null;\n\t\t}\n\t\t\n\t\tlet accessor = /\\W|^\\d+$/.test(key) ? `[${key}]` : (name ? \".\"+key : key);\n\t\tlet value    = print(input[key], options, name + accessor, refs);\n\t\toutput      += \"\\n\";\n\t\t\n\t\t/** Arrays: Check if each value's index should be omitted */\n\t\tif(ignoreNumbers && /^\\d+$/.test(key))\n\t\t\toutput += value;\n\t\t\n\t\t/** Name: Value */\n\t\telse output += `${key}: ${value}`;\n\t}\n\t\n\t/** If we still have a truncation notice, it means there were only numerics to list */\n\tif(null !== truncationNote)\n\t\toutput += truncationNote.replace(/\\n+$/, \"\");\n\t\n\t\n\t/** Properties keyed by Symbols */\n\tlet symbols = Object.getOwnPropertySymbols(input);\n\tif(sortProps) symbols = symbols.sort((a, b) => {\n\t\tconst A = a.toString().toLowerCase();\n\t\tconst B = b.toString().toLowerCase();\n\t\tif(A < B) return -1;\n\t\tif(A > B) return 1;\n\t\treturn 0;\n\t});\n\t\n\tfor(let i = 0, l = symbols.length; i < l; ++i){\n\t\tconst symbol = symbols[i];\n\t\tlet accessor = symbol.toString();\n\t\tlet valName  = \"[\" + accessor + \"]\";\n\t\t\n\t\t/** Use a @@-prefixed form to represent Symbols in property lists */\n\t\tif(ampedSymbols){\n\t\t\taccessor = \"@@\" + accessor.replace(/^Symbol\\(|\\)$/g, \"\");\n\t\t\tvalName  = (name ? \".\" : \"\") + accessor;\n\t\t}\n\t\t\n\t\tconst value = print(input[symbol], options, name + valName, refs);\n\t\toutput += `\\n${accessor}: ${value}`;\n\t}\n\t\n\t\n\t/** Tweak output based on the value's type */\n\tif(\"[object Arguments]\" === type)\n\t\ttypeName = \"Arguments\";\n\t\n\telse{\n\t\tconst ctr = input.constructor ? input.constructor.name : \"\";\n\t\tswitch(ctr){\n\t\t\t\n\t\t\tcase \"GeneratorFunction\":\n\t\t\t\ttypeName = \"function*()\";\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"Function\":\n\t\t\t\ttypeName = \"function()\";\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase \"Array\":\n\t\t\tcase \"Object\":\n\t\t\t\ttypeName = \"\";\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t\ttypeName = ctr;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\toutput = output ? output.replace(/\\n/g, \"\\n\\t\") + \"\\n\" : \"\";\n\treturn typeName + (arrayLike\n\t\t? \"[\" + output + \"]\"\n\t\t: \"{\" + output + \"}\");\n}\n\nmodule.exports = print;\n\n\n/** Wrapper for console.log(print(…)) */\nmodule.exports.out = function(...args){\n\tconst output = print(...args);\n\tconsole.log(output);\n\treturn output;\n};",
    "static": true,
    "longname": "src/print.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "print",
    "memberof": "src/print.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/print.js~print",
    "access": null,
    "export": false,
    "importPath": "nrser/src/print.js",
    "importStyle": null,
    "description": "Generate a human-readable representation of a value.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional parameters"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "ampedSymbols",
        "description": "Prefix Symbol-keyed properties with @@"
      },
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "escapeChars",
        "description": "Which characters are escaped in string values"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxArrayLength",
        "description": "Maximum number of array values to show before truncating"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "showArrayIndices",
        "description": "Show the index of each element in an array"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "showArrayLength",
        "description": "Display an array's \"length\" property after its values"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "sortProps",
        "description": "Alphabetise the enumerable properties of printed objects"
      },
      {
        "nullable": null,
        "types": [
          "Array<*>",
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "omit",
        "description": "objects to omit from printing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "out",
    "memberof": "src/print.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/print.js~out",
    "access": null,
    "export": false,
    "importPath": "nrser/src/print.js",
    "importStyle": null,
    "description": "Wrapper for console.log(print(…))",
    "lineNumber": 352,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/string.js",
    "content": "// @flow\n\nimport _ from '//src/lodash';\nimport print from './print';\n\n/**\n* make a tag function for string template literals that applies a function to\n* each interpolation value when called as a string template\n* \n* @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n* \n* @param {function(value: <TemplateValue>): string} func\n*   function to apply to each interpolation\n*   value when the function `tag` returns is used as a string template tag.\n*   \n*   it should accept any types that will be provided in the string templates\n*   and return a string.\n* \n* @return {function(strings: string[], ...values:Array<TemplateValue>): string}\n*   function that can be uses as a string template tag.\n*/\nexport function tag(func: (value: *) => string) {\n  return (strings: Array<string>, ...values: Array<*>) => {\n    if (_.isArray(strings)) {\n      let result = strings[0];\n      for (let i = 0; i < values.length; i++) {\n        result += func(values[i]) + strings[i + 1];\n      }\n      return result;\n    } else {\n      return func(strings);\n    }\n  }\n}\n\n/**\n* Replace consecutive whitespace with a single space and removes leading\n* and trailing whitespace. Can be used as a template literal.\n* \n* @param {string|Array<string>} strings\n*  String to squish.\n* \n* @param {...string} values\n*   Values to interpolate.\n* \n* @return {string}\n*   Squished output.\n*/\nexport function squish(\n  strings: Array<string> | string,\n  ...values: Array<string>\n) {\n  let input: string;\n  \n  if (Array.isArray(strings)) {\n    input = strings[0];\n    for (let i = 0; i < values.length; i++) {\n      input += values[i] + strings[i + 1];\n    }\n  } else {\n    input = strings;\n  }\n  \n  return input\n    .replace(/\\s+/g, \" \")\n    .replace(/^\\s+/, '')\n    .replace(/\\s+$/, '');\n}\n\n/**\n* string template tag to JSON encode values\n*/\nexport const JSONTag = tag(JSON.stringify);\n\n/**\n* alias for {@link JSONTag}\n*/\nexport const j = JSONTag;\n\n// TODO doesn't work right with regex sep\nexport function rsplit(\n  str: string,\n  sep: string,\n  maxsplit: number\n): Array<string> {\n  const split = str.split(sep);\n  if (maxsplit) {\n    return [split.slice(0, -maxsplit).join(sep)].concat(split.slice(-maxsplit))\n  } else {\n    return split\n  }\n} // rsplit()\n\nexport const inspect = tag(print);\n\nexport const I = inspect;\n\nexport function indent(\n  str: string,\n  {\n    amount = 2,\n    indent,\n  }: {\n    amount?: number,\n    indent?: string,\n  } = {}\n) {\n  indent = indent || ' '.repeat(amount);\n  indent + str.split(\"\\n\").join(`\\n${ indent }`);\n} // indent()\n\n/**\n* split a string into lines.\n*/\nexport function lines(input: string): Array<string> {\n  var re=/\\r\\n|\\n\\r|\\n|\\r/g;\n\n  return input.replace(re,\"\\n\").split(\"\\n\");\n}\n\n/**\n* gets the common prefix for an array of strings, which will be '' if they\n* don't have any.\n*/\nexport function commonPrefix(strings: Array<string>): string {\n  var A= strings.concat().sort(), \n  a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n}\n\nexport function isWhitespace(input: string): boolean {\n  return !!input.match(/^\\s+$/m);\n}\n\nexport function nonWhitespaceLines(input: string): Array<string> {\n  return _.reject(lines(input), line => line.match(/^\\s*$/));\n}\n\nexport function leadingWhitespace(input: string): string {\n  const match = input.match(/^\\s+/);\n  if (match) {\n    return match[0];\n  }\n  \n  return '';\n}\n\nexport function findCommonIndent(input: string): string {\n  return commonPrefix(\n    _.map(nonWhitespaceLines(input), line => leadingWhitespace(line))\n  );\n}\n\nexport function deindent(input: string): string {\n  const indent = findCommonIndent(input);\n  \n  const regexp = new RegExp(`^${ indent }`, 'g');\n  \n  return _.map(lines(input), line => {\n    return line.replace(regexp, '');\n  }).join(\"\\n\");\n}\n\nexport function pad(\n  number: number,\n  padLength: number,\n  padWith: string = '0',\n) {\n  let padded = number.toString();\n  while (padded.length < padLength) {\n    padded = padWith + padded;\n  }\n  return padded;\n} // pad()",
    "static": true,
    "longname": "src/string.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "tag",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~tag",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{tag}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "squish",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~squish",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{squish}",
    "description": "Replace consecutive whitespace with a single space and removes leading\nand trailing whitespace. Can be used as a template literal.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "strings",
        "description": "String to squish."
      },
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "values",
        "description": "Values to interpolate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Squished output."
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "JSONTag",
    "memberof": "src/string.js",
    "static": true,
    "longname": "src/string.js~JSONTag",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{JSONTag}",
    "description": "string template tag to JSON encode values",
    "lineNumber": 73,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "j",
    "memberof": "src/string.js",
    "static": true,
    "longname": "src/string.js~j",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{j}",
    "description": "alias for {@link JSONTag}",
    "lineNumber": 78,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "rsplit",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~rsplit",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{rsplit}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "sep",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxsplit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "inspect",
    "memberof": "src/string.js",
    "static": true,
    "longname": "src/string.js~inspect",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{inspect}",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "I",
    "memberof": "src/string.js",
    "static": true,
    "longname": "src/string.js~I",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{I}",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "indent",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~indent",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{indent}",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "optional": true,
        "types": [
          "{\"amount\": *, \"indent\": *}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "lines",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~lines",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{lines}",
    "description": "split a string into lines.",
    "lineNumber": 115,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "commonPrefix",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~commonPrefix",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{commonPrefix}",
    "description": "gets the common prefix for an array of strings, which will be '' if they\ndon't have any.",
    "lineNumber": 125,
    "params": [
      {
        "name": "strings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "isWhitespace",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~isWhitespace",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{isWhitespace}",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "nonWhitespaceLines",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~nonWhitespaceLines",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{nonWhitespaceLines}",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "leadingWhitespace",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~leadingWhitespace",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{leadingWhitespace}",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "findCommonIndent",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~findCommonIndent",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{findCommonIndent}",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "deindent",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~deindent",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{deindent}",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "pad",
    "memberof": "src/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/string.js~pad",
    "access": null,
    "export": true,
    "importPath": "nrser/src/string.js",
    "importStyle": "{pad}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "number",
        "types": [
          "*"
        ]
      },
      {
        "name": "padLength",
        "types": [
          "*"
        ]
      },
      {
        "name": "padWith",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "0",
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/testing/Describer.js",
    "content": "\n/**\n* @todo this was an attempted start at offering a nicer way to structure\n* test files and have the lib help with some of the repetitive tasks.\n* \n* I didn't feel happy with it an it's not in use and shouldn't be.\n*/\nexport class Describer {\n  constructor(packageRoot) {\n    this.packageRoot = packageRoot;\n  }\n  \n  file(path, body): * {\n    const exp = require(path.replace(/^\\/\\//, this.packageRoot + '/'));\n    \n    return global.describe(`File ${ path }`, (done) => {\n      return body(exp, done);\n    });\n  }\n  \n  class(cls, body): * {\n    return global.describe(`Class ${ cls.name }`, body);\n  }\n}\n\nexport default Describer;\n",
    "static": true,
    "longname": "src/testing/Describer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "Describer",
    "memberof": "src/testing/Describer.js",
    "static": true,
    "longname": "src/testing/Describer.js~Describer",
    "access": null,
    "export": true,
    "importPath": "nrser/src/testing/Describer.js",
    "importStyle": "{Describer}",
    "description": "",
    "lineNumber": 8,
    "todo": [
      "this was an attempted start at offering a nicer way to structure\ntest files and have the lib help with some of the repetitive tasks.\n\nI didn't feel happy with it an it's not in use and shouldn't be."
    ],
    "interface": false
  },
  {
    "__docId__": 208,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/testing/Describer.js~Describer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/Describer.js~Describer#constructor",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "packageRoot",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "packageRoot",
    "memberof": "src/testing/Describer.js~Describer",
    "static": false,
    "longname": "src/testing/Describer.js~Describer#packageRoot",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "file",
    "memberof": "src/testing/Describer.js~Describer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/Describer.js~Describer#file",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "class",
    "memberof": "src/testing/Describer.js~Describer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/Describer.js~Describer#class",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "cls",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "src/testing/index.js",
    "content": "// @flow\n\n// Imports\n// ==========================================================================\n\nimport chai, { expect } from 'chai';\nimport _ from '//src/lodash';\nimport t from 'tcomb';\nimport type { $Refinement } from 'tcomb';\n\nimport * as nrser from '//src/';\n\n\n// Types\n// ==========================================================================\n\ndeclare function it(title: string, block: () => void): void;\n\nfunction isErrorClass(obj: *): boolean {\n  return obj === Error || obj.prototype instanceof Error;\n}\n\ntype ErrorClass = any & $Refinement<typeof isErrorClass>;\n\nfunction hasEvenLength(array: Array<*>): boolean {\n  return array.length % 2 === 0;\n}\n\ntype Pairable<V> = Array<V> & $Refinement<typeof hasEvenLength>;\n\n\n// Private\n// ==========================================================================\n\nclass Throws {\n  errorClass: ErrorClass;\n  pattern: ?RegExp;\n  \n  constructor(errorClass: ErrorClass = Error, pattern?: RegExp) {\n    this.errorClass = errorClass;\n    this.pattern = pattern;\n  }\n  \n  throwArgs() {\n    const args = [this.errorClass];\n    if (this.pattern) {\n      args.push(this.pattern);\n    }\n    return args;\n  }\n}\n\n\n// Exports\n// ==========================================================================\n\n// export * from './Describer';\n\n/**\n* OO structure for expectations.\n*/\nexport class Expect<T> {\n  instanceOf: T;\n  props: Object;\n  size: number;\n  lengthOf: number;\n  \n  constructor({\n    instanceOf,\n    props,\n    size,\n    lengthOf,\n    // members,\n  }: {\n    instanceOf: T,\n    props: Object,\n    size: number,\n    lengthOf: number,\n  }) {\n    this.instanceOf = instanceOf;\n    this.props = props;\n    this.size = size;\n    this.lengthOf = lengthOf;\n    // this.members = members;\n  }\n  \n  test(actual: *): void {\n    if (this.instanceOf) {\n      expect(actual).to.be.instanceOf(this.instanceOf);\n    }\n    \n    if (this.props) {\n      _.each(this.props, (value, name) => {\n        expect(actual).to.have.property(name);\n        \n        if (value instanceof Expect) {\n          value.test(actual[name]);\n        } else {\n          expect(actual[name]).to.eql(value);\n        }\n      });\n    }\n    \n    if (this.size) {\n      expect(_.size(actual)).to.equal(this.size);\n    }\n    \n    if (this.lengthOf) {\n      expect(actual).to.have.lengthOf(this.lengthOf);\n    }\n      \n    // TODO figure this out...\n    // if (this.members) {\n    //   _.each(this.members, (value) => {\n    //     if (value instanceof Expect) {\n    //       expect(actual).to.have.any.member.that.satisfy()\n    //     }\n    //   });\n    // }\n  }\n}\n\nexport function itMaps({\n  func,\n  map,\n  \n  funcName = func.name ? func.name.replace('bound ', '') : 'f',\n  \n  tester = ({actual, expected}) => {\n    if (expected instanceof Expect) {\n      expected.test(actual);\n    } else {\n      expect(actual).to.eql(expected);\n    }\n  },\n  \n  formatArgs = (args: Array<*>, funcName: string): string => (\n    `${ funcName }(${ _.map(args, (a) => JSON.stringify(a)).join(\", \") })`\n  ),\n  \n  formatExpected = (expected: *): string => {\n    const json = JSON.stringify(expected);\n    if (typeof json === 'string') {\n      return json;\n    }\n    return '???';\n  },\n  \n  formatter = (args: Array<*>, expected: *, funcName: string): string => {\n    if (expected instanceof Throws) {\n      return nrser.squish`\n        ${ formatArgs(args, funcName) }\n        throws\n        ${ expected.errorClass.name }\n      `;\n      \n    } else {\n      return nrser.squish`\n        maps\n        ${ formatArgs(args, funcName) }\n        to ${ formatExpected(expected) }\n      `;\n      \n    }\n  },\n}: {\n  func: Function,\n  \n  funcName?: string,\n  \n  // the map is function that accepts two arguments:\n  map: (\n    // 1. a wrapper that converts it's arguments to an array to be fed into\n    // the test function\n    f: (...args: Array<*>) => Array<*>,\n    // 2. a function that creates a {Throws} to indicate the call should\n    // throw an error of a certain type with an optional pattern for the\n    // message\n    throws: (errorClass: ErrorClass, pattern?: RegExp) => Throws,\n  // and returns a array of even length that represents actual, expected pairs\n  ) => Pairable<*>,\n  \n  // the function the performs the assertions, the default implementation of\n  // which checks that the actual is deeply equal to the expected.\n  tester?: (pair: {actual: *, expected: *}) => void,\n  \n  // a function to format the calling args for display\n  formatArgs?: (args: Array<*>, funcName: string) => string,\n  \n  // a function to format the expected value\n  formatExpected?: (expected: *) => string,\n  \n  // a function to format it all that calls the others by default\n  formatter?: (args: Array<*>, expected: *, funcName: string) => string,\n}): void {\n  const mapping: Pairable<*> = map(\n    (...args) => args,\n    (errorClass, pattern) => new Throws(errorClass, pattern)\n  );\n  \n  for (let i = 0; i < mapping.length; i += 2) {\n    const args = mapping[i];\n    const expected = mapping[i + 1];\n    \n    it(formatter(args, expected, funcName), () => {\n      if (expected instanceof Throws) {\n        chai.expect(\n          () => func(...args)\n        ).to.throw(expected.errorClass, expected.pattern);\n      } else {\n        tester({actual: func(...args), expected});\n      }\n    })\n  }\n}\n",
    "static": true,
    "longname": "src/testing/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "isErrorClass",
    "memberof": "src/testing/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/testing/index.js~isErrorClass",
    "access": null,
    "export": false,
    "importPath": "nrser/src/testing/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "hasEvenLength",
    "memberof": "src/testing/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/testing/index.js~hasEvenLength",
    "access": null,
    "export": false,
    "importPath": "nrser/src/testing/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "Throws",
    "memberof": "src/testing/index.js",
    "static": true,
    "longname": "src/testing/index.js~Throws",
    "access": null,
    "export": false,
    "importPath": "nrser/src/testing/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "interface": false
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "errorClass",
    "memberof": "src/testing/index.js~Throws",
    "static": false,
    "longname": "src/testing/index.js~Throws#errorClass",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/testing/index.js~Throws",
    "static": false,
    "longname": "src/testing/index.js~Throws#pattern",
    "access": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/testing/index.js~Throws",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/index.js~Throws#constructor",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "errorClass",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "Error",
        "defaultValue": "Error"
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "errorClass",
    "memberof": "src/testing/index.js~Throws",
    "static": false,
    "longname": "src/testing/index.js~Throws#errorClass",
    "access": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "pattern",
    "memberof": "src/testing/index.js~Throws",
    "static": false,
    "longname": "src/testing/index.js~Throws#pattern",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "throwArgs",
    "memberof": "src/testing/index.js~Throws",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/index.js~Throws#throwArgs",
    "access": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "Expect",
    "memberof": "src/testing/index.js",
    "static": true,
    "longname": "src/testing/index.js~Expect",
    "access": null,
    "export": true,
    "importPath": "nrser/src/testing/index.js",
    "importStyle": "{Expect}",
    "description": "OO structure for expectations.",
    "lineNumber": 62,
    "interface": false
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "instanceOf",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#instanceOf",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "props",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#props",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "size",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#size",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "lengthOf",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#lengthOf",
    "access": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/testing/index.js~Expect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/index.js~Expect#constructor",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"instanceOf\": *, \"props\": *, \"size\": *, \"lengthOf\": *}"
        ],
        "defaultRaw": {
          "instanceOf": null,
          "props": null,
          "size": null,
          "lengthOf": null
        },
        "defaultValue": "{\"instanceOf\":null,\"props\":null,\"size\":null,\"lengthOf\":null}"
      }
    ]
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "instanceOf",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#instanceOf",
    "access": null,
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "props",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#props",
    "access": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "size",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#size",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "lengthOf",
    "memberof": "src/testing/index.js~Expect",
    "static": false,
    "longname": "src/testing/index.js~Expect#lengthOf",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "test",
    "memberof": "src/testing/index.js~Expect",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/testing/index.js~Expect#test",
    "access": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "actual",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "itMaps",
    "memberof": "src/testing/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/testing/index.js~itMaps",
    "access": null,
    "export": true,
    "importPath": "nrser/src/testing/index.js",
    "importStyle": "{itMaps}",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"func\": *, \"map\": *, \"funcName\": *, \"tester\": *, \"formatArgs\": *, \"formatExpected\": *, \"formatter\": *}"
        ],
        "defaultRaw": {
          "func": null,
          "map": null,
          "funcName": null,
          "tester": null,
          "formatArgs": null,
          "formatExpected": null,
          "formatter": null
        },
        "defaultValue": "{\"func\":null,\"map\":null,\"funcName\":null,\"tester\":null,\"formatArgs\":null,\"formatExpected\":null,\"formatter\":null}"
      }
    ]
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/types/collection.js",
    "content": "\n/**\n* lodash-style collection.\n*/\nexport type Collection<V> = Array<V> | {[key: string]: V};\n\n/**\n* deep 'path' to a value in a collection (array or object).\n* \n* @typedef {string | Array<string|number>} KeyPath\n*/\nexport type KeyPath = string | Array<string|number>;\n",
    "static": true,
    "longname": "src/types/collection.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "typedef",
    "name": "KeyPath",
    "memberof": "src/types/collection.js",
    "static": true,
    "longname": "src/types/collection.js~KeyPath",
    "access": null,
    "description": "deep 'path' to a value in a collection (array or object).",
    "lineNumber": 12,
    "type": {
      "types": [
        "string | Array<string|number>"
      ],
      "optional": false,
      "name": "KeyPath"
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/types/index.js",
    "content": "// @flow\n\n// Imports\n// ===========================================================================\n\n// Deps\nimport t from 'tcomb';\nimport Promise from 'bluebird';\n\n// Package\nimport _ from '//src/lodash';\n\n\n// Exports\n// ===========================================================================\n\nexport const Undefined = t.irreducible('Undefined', (v) => _.isUndefined(v));\n\nexport const Null = t.irreducible('Null', v => _.isNull(v));\n\nexport function nullable(type) {\n  return t.union(Null, type);\n}\n\nexport const Empty = t.irreducible('Empty', (v) => _.isEmpty(v));\n\nexport function instanceOf(klass, name) {\n  return t.irreducible(\n    name || `InstanceOf<${ klass.name }>`,\n    obj => obj instanceof klass,\n  );\n}\n\nexport function subclassOf(klass, name) {\n  return t.irreducible(\n    name || `SubclassOf<${ klass.name }>`,\n    obj => obj && obj.prototype && (obj.prototype instanceof klass)\n  );\n}\n\nexport const ErrorType = instanceOf(Error);\n\nexport const PromiseType = instanceOf(Promise);\n\nexport * from './number';\nexport * from './string';\nexport * from './value';\nexport * from './list';\nexport * from './struct';\nexport * from './collection';\n",
    "static": true,
    "longname": "src/types/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "Undefined",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~Undefined",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{Undefined}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "Null",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~Null",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{Null}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "nullable",
    "memberof": "src/types/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/index.js~nullable",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{nullable}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "variable",
    "name": "Empty",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~Empty",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{Empty}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "instanceOf",
    "memberof": "src/types/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/index.js~instanceOf",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{instanceOf}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "klass",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "subclassOf",
    "memberof": "src/types/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/index.js~subclassOf",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{subclassOf}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "klass",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "ErrorType",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~ErrorType",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{ErrorType}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "PromiseType",
    "memberof": "src/types/index.js",
    "static": true,
    "longname": "src/types/index.js~PromiseType",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/index.js",
    "importStyle": "{PromiseType}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/types/list.js",
    "content": "import t from 'tcomb';\n\nexport function nonEmptyList(type, name) {\n  return t.refinement(\n    t.list(type, name),\n    array => array.length > 0,\n    name || `NonEmptyList<${ t.getTypeName(type) }>`\n  )\n}\n",
    "static": true,
    "longname": "src/types/list.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "nonEmptyList",
    "memberof": "src/types/list.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/list.js~nonEmptyList",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/list.js",
    "importStyle": "{nonEmptyList}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "src/types/number.js",
    "content": "// @flow\n\nimport type { $Refinement, $Reify } from 'tcomb';\n\nimport type { Type } from './type';\n\n\n/**\n* The number `0`. `-0` also passes.\n* \n* @typedef {number} Zero\n*/\nexport type Zero = 0;\n\n/**\n* tcomb type for {@link Zero}.\n* \n* @type {Type}\n*/\nexport const tZero = (({}: any): $Reify<Zero>);\n\n\n/**\n* Predicate for {@link Integer}, calls {@link Number.isInteger}.\n* \n* @param {number} number\n*   The number to test.\n* \n* @return {boolean}\n*   True if `number` is an integer.\n*/\nfunction isInteger(number: number) {\n  return Number.isInteger(number);\n}\n\n/**\n* An number that is an integer.\n* \n* @typedef {number} Integer\n*/\nexport type Integer = number & $Refinement<typeof isInteger>;\n\n/**\n* tcomb type for {@link Integer}.\n* \n* @type {Type}\n*/\nexport const tInteger = (({}: any): $Reify<Integer>);\n\n\n/**\n* Predicate for {@link Positive}.\n* \n* @param {number} number\n*   The number to test.\n* \n* @return {boolean}\n*   True if `number` is positive.\n*/\nfunction isPositive(number: number): boolean {\n  return number > 0;\n}\n\n/**\n* A positive number.\n* \n* @typedef {number} Positive\n*/\nexport type Positive = number & $Refinement<typeof isPositive>;\n\n/**\n* tcomb type for {@link Positive}.\n* \n* @type {Type}\n*/\nexport const tPositive = (({}: any): $Reify<Positive>);\n\n\n/**\n* A positive integer.\n* \n* @typedef {number} PositiveInteger\n*/\nexport type PositiveInteger = Integer & Positive;\n\n/**\n* tcomb type for {@link PositiveInteger}.\n* \n* @type {Positive}\n*/\nexport const tPositiveInteger = (({}: any): $Reify<PositiveInteger>);\n\n\n/**\n* Predicate for {@link Positive}.\n* \n* @param {number} number\n*   The number to test.\n* \n* @return {boolean}\n*   True if `number` is positive.\n*/\nfunction isNegative(number: number): boolean {\n  return number < 0;\n}\n\n/**\n* A negative number.\n* \n* @typedef {number} PositiveInteger\n*/\nexport type Negative = number & $Refinement<typeof isNegative>;\n\n/**\n* tcomb type for {@link Negative}.\n* \n* @type {Type}\n*/\nexport const tNegative = (({}: any): $Reify<Negative>);\n\n\n/**\n* A negative {@link Integer}.\n* \n* @typedef {number} NegativeInteger\n*/\nexport type NegativeInteger = Integer & Negative;\n\n/**\n* tcomb type for {@link NegativeInteger}.\n* \n* @type {Type}\n*/\nexport const tNegativeInteger = (({}: any): $Reify<NegativeInteger>);\n\n\n/**\n* {@link Zero} or a {@link NegativeInteger}.\n* \n* @typedef {number} NonPositiveInteger\n*/\nexport type NonPositiveInteger = Zero | NegativeInteger;\n\n/**\n* tcomb type for {@link NonPositiveInteger}.\n* \n* @type {Type}\n*/\nexport const tNonPositiveInteger = (({}: any): $Reify<NonPositiveInteger>);\n\n\n/**\n* {@link Zero} or a {@link PositiveInteger}.\n* \n* @typedef {number} NonNegativeInteger\n*/\nexport type NonNegativeInteger = Zero | PositiveInteger;\n\n/**\n* tcomb type for {@link NonNegativeInteger}.\n* \n* @type {Type}\n*/\nexport const tNonNegativeInteger = (({}: any): $Reify<NonNegativeInteger>);\n",
    "static": true,
    "longname": "src/types/number.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "typedef",
    "name": "Zero",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~Zero",
    "access": null,
    "description": "The number `0`. `-0` also passes.",
    "lineNumber": 13,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "Zero"
    }
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "tZero",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tZero",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tZero}",
    "description": "tcomb type for {@link Zero}.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "isInteger",
    "memberof": "src/types/number.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/number.js~isInteger",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/number.js",
    "importStyle": null,
    "description": "Predicate for {@link Integer}, calls {@link Number.isInteger}.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The number to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if `number` is an integer."
    }
  },
  {
    "__docId__": 251,
    "kind": "typedef",
    "name": "Integer",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~Integer",
    "access": null,
    "description": "An number that is an integer.",
    "lineNumber": 41,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "Integer"
    }
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "tInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tInteger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tInteger}",
    "description": "tcomb type for {@link Integer}.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "isPositive",
    "memberof": "src/types/number.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/number.js~isPositive",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/number.js",
    "importStyle": null,
    "description": "Predicate for {@link Positive}.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The number to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if `number` is positive."
    }
  },
  {
    "__docId__": 254,
    "kind": "typedef",
    "name": "Positive",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~Positive",
    "access": null,
    "description": "A positive number.",
    "lineNumber": 69,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "Positive"
    }
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "tPositive",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tPositive",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tPositive}",
    "description": "tcomb type for {@link Positive}.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "typedef",
    "name": "PositiveInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~PositiveInteger",
    "access": null,
    "description": "A positive integer.",
    "lineNumber": 84,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "PositiveInteger"
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "tPositiveInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tPositiveInteger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tPositiveInteger}",
    "description": "tcomb type for {@link PositiveInteger}.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Positive"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "isNegative",
    "memberof": "src/types/number.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/number.js~isNegative",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/number.js",
    "importStyle": null,
    "description": "Predicate for {@link Positive}.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The number to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if `number` is positive."
    }
  },
  {
    "__docId__": 259,
    "kind": "typedef",
    "name": "PositiveInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~PositiveInteger",
    "access": null,
    "description": "A negative number.",
    "lineNumber": 112,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "PositiveInteger"
    }
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "tNegative",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tNegative",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tNegative}",
    "description": "tcomb type for {@link Negative}.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "typedef",
    "name": "NegativeInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~NegativeInteger",
    "access": null,
    "description": "A negative {@link Integer}.",
    "lineNumber": 127,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "NegativeInteger"
    }
  },
  {
    "__docId__": 262,
    "kind": "variable",
    "name": "tNegativeInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tNegativeInteger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tNegativeInteger}",
    "description": "tcomb type for {@link NegativeInteger}.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "typedef",
    "name": "NonPositiveInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~NonPositiveInteger",
    "access": null,
    "description": "{@link Zero} or a {@link NegativeInteger}.",
    "lineNumber": 142,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "NonPositiveInteger"
    }
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "tNonPositiveInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tNonPositiveInteger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tNonPositiveInteger}",
    "description": "tcomb type for {@link NonPositiveInteger}.",
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "typedef",
    "name": "NonNegativeInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~NonNegativeInteger",
    "access": null,
    "description": "{@link Zero} or a {@link PositiveInteger}.",
    "lineNumber": 157,
    "type": {
      "types": [
        "number"
      ],
      "optional": false,
      "name": "NonNegativeInteger"
    }
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "tNonNegativeInteger",
    "memberof": "src/types/number.js",
    "static": true,
    "longname": "src/types/number.js~tNonNegativeInteger",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/number.js",
    "importStyle": "{tNonNegativeInteger}",
    "description": "tcomb type for {@link NonNegativeInteger}.",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "Type"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/types/string.js",
    "content": "import t from 'tcomb';\nimport type { $Refinement } from 'tcomb';\nimport _ from '//src/lodash';\n\n/**\n* string of length one\n*/\nfunction isChar(s: string): boolean {\n  return s.length === 1;\n}\nexport type Char = string & $Refinement<typeof isChar>;\n\n/**\n* string that's not ''\n*/\nfunction isNonEmptyString(s: string): boolean {\n  return s.length > 0;\n}\nexport type NonEmptyString = string & $Refinement<typeof isNonEmptyString>;\n\n/**\n* string that's all upper case\n*/\nfunction isUpperCaseString(s: string): boolean {\n  return s.toUpperCase() === s;\n}\nexport type UpperCaseString = string & $Refinement<typeof isUpperCaseString>;\n",
    "static": true,
    "longname": "src/types/string.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "isChar",
    "memberof": "src/types/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/string.js~isChar",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/string.js",
    "importStyle": null,
    "description": "string of length one",
    "lineNumber": 8,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "function",
    "name": "isNonEmptyString",
    "memberof": "src/types/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/string.js~isNonEmptyString",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/string.js",
    "importStyle": null,
    "description": "string that's not ''",
    "lineNumber": 16,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "isUpperCaseString",
    "memberof": "src/types/string.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/string.js~isUpperCaseString",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/string.js",
    "importStyle": null,
    "description": "string that's all upper case",
    "lineNumber": 24,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/types/struct.js",
    "content": "import t from 'tcomb';\nimport _ from '//src/lodash';\nimport { match } from '../match';\nimport { value } from './value';\nimport { squish } from '../string.js';\n\nexport function extendProps(superProps, subProps, strict) {\n  const extendedProps = _.mapValues(subProps, (subProp, key) => {\n    \n    // see if there was a super type\n    if (_.has(superProps, key)) {\n      const superType = superProps[key];\n      \n      // there was.\n      // what we do depends on what the refinement \n      return match(subProp,\n        // it's another type\n        t.Type, subType => {\n          if (subType === superType) {\n            // it's identical to the super type, so just use it\n            return subType;\n          } else {\n            // it's a different type\n            // an intersection will make sure it satisfies both\n            // hopefully it's a sub-type of the super type, otherwise\n            // it will never satisfy\n            return t.intersection([superType, subType]);\n          }\n        },\n        \n        // it's a function, which we take as the predicate for a refinement\n        t.Function, predicate => t.refinement(superType, predicate),\n        \n        // it's some sort of value, which should be a member of the super\n        // type for it to make any sense\n        t.Any, v => {\n          // check that it satisfies the super type\n          t.assert(superType.is(v), () => squish(`\n            prop ${ key } given value ${ t.stringify(v) } that is not of\n            super type ${ t.getTypeName(superType) }\n          `));\n          // the new type is that exact value\n          return value(v);\n        },\n      );\n      \n    } else {\n      // there is no super type\n      \n      // if the super struct is strict this is an error since it would \n      // mean that there could be instances that satisfy the sub type\n      // but not the super\n      \n      t.assert(!strict, () => squish(`\n        can not add prop ${ key } via extension because super type\n        is strict.\n      `));\n      \n      return match(subProp,\n        t.Type, type => type,\n        t.Any, v => value(v),\n      );\n      \n    }\n  });\n  \n  const mergedProps = {\n    ...superProps,\n    ...extendedProps\n  };\n  \n  return mergedProps;\n}\n\nexport function struct(props, options = {}) {\n  const Struct = t.struct(props, options);\n  \n  /**\n  * my extend allows defining of additional properties (when extending \n  * from non-strict structs) *and* refining of existing properties with the\n  * principle that if B is an extension of A then any instance that is\n  * of type B is also of type A.\n  */\n  Struct.extend = function (props, options = {}) {\n    // deal with options\n    \n    options = match(options,\n      // if options is a string it's the name\n      t.String, name => {name},\n      // otherwise it should be an object\n      // clone it so that we can modify it without potential effects outside\n      // this function\n      t.Object, {...options},\n    );\n    \n    // merge super struct defaultProps\n    options.defaultProps = {\n      ...Struct.meta.defaultProps,\n      ...options.defaultProps\n    };\n    \n    // handle strictness\n    if (_.has(options, 'strict')) {\n      // if the super struct is strict, then extended struct must be strict\n      // (and also must add no new props) - otherwise we could have a situation\n      // where instances were members of the sub struct type but not the super\n      // struct type.\n      if (Struct.meta.strict && options.strict === false) {\n        throw new TypeError(squish(`\n          can't create a non-strict sub-struct of strict struct\n          ${ t.getTypeName(Struct) }\n        `));\n      }\n    } else {\n      // strict is not provided in the options, so inherit from the\n      // super struct\n      options.strict = Struct.meta.strict;\n    }\n    \n    return struct(\n      extendProps(Struct.meta.props, props, Struct.meta.strict),\n      options\n    );\n  }\n  \n  return Struct;\n}",
    "static": true,
    "longname": "src/types/struct.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "extendProps",
    "memberof": "src/types/struct.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/struct.js~extendProps",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/struct.js",
    "importStyle": "{extendProps}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "superProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "subProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "strict",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "struct",
    "memberof": "src/types/struct.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/struct.js~struct",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/struct.js",
    "importStyle": "{struct}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "src/types/type.js",
    "content": "// @flow\n\nimport type { $Refinement, $Reify } from 'tcomb';\n\n/**\n* tcomb type meta object\n* \n* @see http://gcanti.github.io/tcomb/guide/index.html\n* @see https://archive.is/3JwrZ\n* \n* @see https://github.com/gcanti/tcomb/blob/master/docs/API.md\n* @see https://archive.is/C6Iqh\n*/\nexport type Meta = {\n  // the tcomb type kind, see their docs / source for details.\n  // \n  kind: string,\n  \n  // the type name\n  // \n  // this can be undefined, like when creating a Struct with t.struct and\n  // not prodiving a `name` in the options.\n  //\n  name?: string,\n  \n  // if true, `tcomb/lib/create` will create a instance with `type(value)`.\n  // if false (*and* `type` is an object *and* value is not `null`) it will\n  // use `new type(value)`\n  identity?: boolean,\n}\n\n/**\n* a tcomb type.\n* \n* this is to support flow; if you need to test in runtime use tcomb's t.Type.\n* \n* @typedef {Object} Type\n*/\nexport type Type = {\n  meta: Meta,\n  displayName: string,\n  is: (value: any) => boolean,\n}\n\nexport const tType = (({}: any): $Reify<Type>);\n\n/**\n* tcomb props - an object mapping property names to their tcomb type.\n*/\nexport type Props = {[name: string]: Type};",
    "static": true,
    "longname": "src/types/type.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "typedef",
    "name": "Type",
    "memberof": "src/types/type.js",
    "static": true,
    "longname": "src/types/type.js~Type",
    "access": null,
    "description": "a tcomb type.\n\nthis is to support flow; if you need to test in runtime use tcomb's t.Type.",
    "lineNumber": 39,
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Type"
    }
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "tType",
    "memberof": "src/types/type.js",
    "static": true,
    "longname": "src/types/type.js~tType",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/type.js",
    "importStyle": "{tType}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/types/value.js",
    "content": "import t from 'tcomb';\nimport _ from '//src/lodash';\n\nimport { NonEmptyString, UpperCaseString } from './string.js';\nimport { nonEmptyList } from './list.js';\n\n/**\n* create a type that just wraps a specific value. `is()` uses `===`.\n*/\nexport function value(value, name) {\n  return t.irreducible(\n    name || `Value<${ value  }>`,\n    v => v === value,\n  );\n}\n\n/**\n* `values()` creates a union type for each of the values in the provided\n* object.\n*/\nexport function values(obj, name) {\n  const valueTypes = _.mapValues(t.Object(obj), (v) => value(v));\n  const type = t.union(_.values(valueTypes));\n  type.types = valueTypes;\n  type.values = {};\n\n  _.each(obj, (v, k) => {\n    UpperCaseString(k);\n\n    // shouldn't happen since props are not upper case\n    if (_.has(type, k)) {\n      throw new errors.ValueError(squish(`\n        can\\'t provide key ' + k + ' because union type defines the property\n      `));\n    }\n\n    // convenient accessor, like VALUES.X\n    type[k] = v;\n\n    // nice for iteration of the values\n    type.values[k] = v;\n  });\n\n  return type;\n}\n\nvalues.of = function (array) {\n  nonEmptyList(NonEmptyString)(array);\n  \n  var obj = {};\n\n  for (var i = 0, len = array.length; i < len; i++) {\n    obj[array[i].toUpperCase()] = array[i];\n  }\n\n  return values(obj);\n};",
    "static": true,
    "longname": "src/types/value.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "value",
    "memberof": "src/types/value.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/value.js~value",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/value.js",
    "importStyle": "{value}",
    "description": "create a type that just wraps a specific value. `is()` uses `===`.",
    "lineNumber": 10,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "values",
    "memberof": "src/types/value.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/value.js~values",
    "access": null,
    "export": true,
    "importPath": "nrser/src/types/value.js",
    "importStyle": "{values}",
    "description": "`values()` creates a union type for each of the values in the provided\nobject.",
    "lineNumber": 21,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "of",
    "memberof": "src/types/value.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/types/value.js~of",
    "access": null,
    "export": false,
    "importPath": "nrser/src/types/value.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "unknown": [
      {
        "tagName": "@_undocument",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 312,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 314,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 315,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 316,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 317,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 318,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 319,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 320,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 321,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 322,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 323,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 324,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 325,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 326,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 327,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 328,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "static": true,
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "lineNumber": 193,
    "builtinExternal": true
  },
  {
    "__docId__": 330,
    "kind": "external",
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 331,
    "kind": "external",
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 332,
    "kind": "external",
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 333,
    "kind": "external",
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 334,
    "kind": "external",
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 335,
    "kind": "external",
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 336,
    "kind": "external",
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 337,
    "kind": "external",
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "static": true,
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "lineNumber": 34,
    "builtinExternal": true
  }
]